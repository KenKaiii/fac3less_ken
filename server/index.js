"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:true});exports.initializeServer=initializeServer;const express_1=__importDefault(require("express"));const cors_1=__importDefault(require("cors"));const dotenv_1=__importDefault(require("dotenv"));const path_1=__importDefault(require("path"));const generation_routes_1=require("./api/routes/generation.routes");const models_routes_1=require("./api/routes/models.routes");const status_routes_1=require("./api/routes/status.routes");const sse_routes_1=require("./api/routes/sse.routes");const workflow_routes_1=__importDefault(require("./api/routes/workflow.routes"));const workflow_sse_routes_1=__importDefault(require("./api/routes/workflow.sse.routes"));const templates_routes_1=__importDefault(require("./api/routes/templates.routes"));const generation_service_1=require("../services/generation.service");const FileCleanupService_1=require("./services/utils/FileCleanupService");const health_validation_1=require("./api/validation/health.validation");const logger_1=require("./utils/logger");dotenv_1.default.config();const app=(0,express_1.default)();const PORT=process.env.PORT||3e3;function initializeServer(e,t){const s=e||app;const r={origin:"production"===process.env.NODE_ENV?process.env.FRONTEND_URL:true,credentials:true,methods:["GET","POST","PUT","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization","X-User-ID"]};s.use((0,cors_1.default)(r));s.use(express_1.default.json());s.use(express_1.default.urlencoded({extended:true}));s.use(express_1.default.static(path_1.default.join(__dirname,"../")));s.use("/media",(e,t,s)=>{logger_1.logger.debug(`[MEDIA] Request for: ${e.path}`);logger_1.logger.debug(`[MEDIA] Full path: ${path_1.default.join(process.cwd(),"output",e.path)}`);s()});s.use("/assets",express_1.default.static(path_1.default.join(process.cwd(),"assets")));s.use("/media",express_1.default.static(path_1.default.join(process.cwd(),"output"),{setHeaders:(e,t)=>{if(t.endsWith(".wav"))e.setHeader("Content-Type","audio/wav");else if(t.endsWith(".mp3"))e.setHeader("Content-Type","audio/mpeg");else if(t.endsWith(".mp4"))e.setHeader("Content-Type","video/mp4");else if(t.endsWith(".webm"))e.setHeader("Content-Type","video/webm");else if(t.endsWith(".png"))e.setHeader("Content-Type","image/png");else if(t.endsWith(".jpg")||t.endsWith(".jpeg"))e.setHeader("Content-Type","image/jpeg");else if(t.endsWith(".webp"))e.setHeader("Content-Type","image/webp");e.setHeader("Access-Control-Allow-Origin","*");e.setHeader("Access-Control-Allow-Methods","GET, HEAD, OPTIONS")}}));s.get("/health",...health_validation_1.validateHealthCheck,(e,t)=>{t.json({status:"ok",timestamp:(new Date).toISOString(),service:"video-generation-api"})});s.use("/api/generate",generation_routes_1.generationRoutes);s.use("/api/models",models_routes_1.modelRoutes);s.use("/api/status",status_routes_1.statusRoutes);s.use("/api/sse",sse_routes_1.sseRoutes);s.use("/api/workflow",workflow_routes_1.default);s.use("/api/workflow/sse",workflow_sse_routes_1.default);s.use("/api/templates",templates_routes_1.default);if("production"!==process.env.NODE_ENV&&"true"===process.env.ENABLE_TEST_ROUTES)initializeServices();return s}async function initializeServices(){try{const e=FileCleanupService_1.FileCleanupService.getInstance();await e.initialize();setInterval(()=>{try{generation_service_1.generationService.cleanupOldJobs()}catch(e){logger_1.logger.error("Error cleaning up old jobs:",e)}},18e5)}catch(e){logger_1.logger.error("Error during service initialization:",e)}}if(!module.parent){initializeServer();app.use((e,t)=>{t.status(404).json({error:"Not Found",message:`Route ${e.method} ${e.path} not found`,timestamp:(new Date).toISOString()})});app.use((e,t,s,r)=>{logger_1.logger.error("Error:",e);const o=e.status||500;const i=e.message||"Internal Server Error";s.status(o).json({error:500===o?"Internal Server Error":e.name,message:"production"===process.env.NODE_ENV&&500===o?"An error occurred processing your request":i,timestamp:(new Date).toISOString(),..."production"!==process.env.NODE_ENV&&{stack:e.stack}})});app.listen(PORT,async()=>{logger_1.logger.info(`Server running on port ${PORT}`)})}