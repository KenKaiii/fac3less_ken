"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.WorkflowController=void 0;const orchestration_1=require("../../services/ai/orchestration/index");const openrouter_1=require("../../services/ai/llm/providers/openrouter/index");const replicate_1=require("../../services/ai/video/providers/replicate/index");const ReplicateImageClient_1=require("../../services/ai/image/providers/replicate/ReplicateImageClient");const ai_1=require("../../../config/ai/index");const workflow_sse_routes_1=require("../routes/workflow.sse.routes");const logger_1=require("../../utils/logger");class WorkflowController{workflowExecutor;llmClient;videoClient;imageClient;constructor(){this.workflowExecutor=new orchestration_1.WorkflowExecutor;this.llmClient=new openrouter_1.OpenRouterClient({apiKey:ai_1.openRouterConfig.apiKey||void 0});this.videoClient=new replicate_1.ReplicateClient({apiKey:ai_1.replicateConfig.apiToken||void 0});this.imageClient=new ReplicateImageClient_1.ReplicateImageClient}async executeWorkflow(e,o){try{const{workflow:r,initialInput:t}=e.body;if(r?.nodes)r.nodes.forEach(e=>{});if(!r||!t){o.status(400).json({success:false,error:"Workflow definition and initial input are required"});return}const s=`exec_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;o.json({success:true,data:{executionId:s,status:"started",message:"Workflow execution started. Use SSE endpoint for real-time updates."}});setTimeout(()=>{this.workflowExecutor.executeWorkflowAsync(r,t,{workflowId:r.id,nodeId:"",userId:e.headers["x-user-id"]},{executionId:s,onProgress:(e,o,r)=>{(0,workflow_sse_routes_1.sendProgressUpdate)(e,o,r)}}).catch(e=>{logger_1.logger.error("Async workflow execution error:",e)})},500)}catch(e){logger_1.logger.error("Workflow execution error:",e);o.status(500).json({success:false,error:e instanceof Error?e.message:"Failed to execute workflow"})}}async getExecutionStatus(e,o){try{const{executionId:r}=e.params;const t=this.workflowExecutor.getExecutionResult(r);if(!t){o.status(404).json({success:false,error:"Execution not found"});return}o.json({success:true,data:{executionId:t.workflowId,status:t.status,startTime:t.startTime,endTime:t.endTime,error:t.error,nodeResults:Array.from(t.nodeResults.entries()).map(([e,o])=>({nodeId:e,success:o.success,error:o.error,metadata:o.metadata}))}})}catch(e){logger_1.logger.error("Get execution status error:",e);o.status(500).json({success:false,error:e instanceof Error?e.message:"Failed to get execution status"})}}async cancelWorkflow(e,o){const{executionId:r}=e.params;try{if(this.workflowExecutor.cancelExecution(r))o.json({success:true,message:"Workflow execution cancelled"});else o.status(404).json({success:false,error:"Execution not found or already completed"})}catch(e){logger_1.logger.error("Error cancelling workflow:",e);o.status(500).json({success:false,error:"Failed to cancel workflow"})}}async listLLMModels(e,o){try{const e=await this.llmClient.listModels();o.json({success:e.success,data:e.data,metadata:e.metadata})}catch(e){logger_1.logger.error("List LLM models error:",e);logger_1.logger.error("Error stack:",e instanceof Error?e.stack:"No stack trace");o.status(500).json({success:false,error:e instanceof Error?e.message:"Failed to list LLM models"})}}async listVideoModels(e,o){try{const e=await this.videoClient.listModels();o.json({success:e.success,data:e.data,metadata:e.metadata})}catch(e){logger_1.logger.error("List video models error:",e);o.status(500).json({success:false,error:e instanceof Error?e.message:"Failed to list video models"})}}async listImageModels(e,o){try{if(!this.imageClient){o.json({success:true,data:[],metadata:{count:0,providers:[]}});return}const e=this.imageClient.getAvailableModels().map(e=>({id:e.id,name:e.config.name,description:e.config.description,provider:"replicate",capabilities:{minWidth:e.config.minWidth,maxWidth:e.config.maxWidth,minHeight:e.config.minHeight,maxHeight:e.config.maxHeight,supportedAspectRatios:e.config.supportedAspectRatios,supportedFormats:e.config.supportedFormats},pricing:{costPerImage:e.config.costPerImage},defaults:e.config.defaultOptions}));o.json({success:true,data:e,metadata:{count:e.length,providers:["replicate"]}})}catch(e){logger_1.logger.error("List image models error:",e);o.status(500).json({success:false,error:e instanceof Error?e.message:"Failed to list image models"})}}}exports.WorkflowController=WorkflowController;