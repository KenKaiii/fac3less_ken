"use strict";Object.defineProperty(exports,"__esModule",{value:true});const express_1=require("express");const express_validator_1=require("express-validator");const TemplateService_1=require("../../services/templates/TemplateService");const router=(0,express_1.Router)();const handleValidationErrors=(e,t)=>{const r=(0,express_validator_1.validationResult)(e);if(!r.isEmpty()){t.status(400).json({errors:r.array()});return true}return false};router.get("/nodes/defaults",(e,t)=>{try{const e=TemplateService_1.templateService.getNodeDefaults();t.json(e)}catch(e){console.error("Error fetching node defaults:",e);t.status(500).json({error:"Failed to fetch node defaults"})}});router.get("/system",[(0,express_validator_1.query)("tags").optional().isString().trim(),(0,express_validator_1.query)("category").optional().isString().trim().isLength({max:50}),(0,express_validator_1.query)("search").optional().isString().trim().isLength({max:100}),(0,express_validator_1.query)("limit").optional().isInt({min:1,max:100}).toInt(),(0,express_validator_1.query)("offset").optional().isInt({min:0}).toInt()],(e,t)=>{if(handleValidationErrors(e,t))return;try{const r={tags:e.query.tags?e.query.tags.split(","):void 0,category:e.query.category,search:e.query.search,limit:e.query.limit?parseInt(e.query.limit):void 0,offset:e.query.offset?parseInt(e.query.offset):void 0};const s=TemplateService_1.templateService.getSystemTemplates(r);t.json(s)}catch(e){console.error("Error fetching system templates:",e);t.status(500).json({error:"Failed to fetch system templates"})}});router.get("/system/:id",[(0,express_validator_1.param)("id").isString().trim().notEmpty().isLength({max:100})],(e,t)=>{if(handleValidationErrors(e,t))return;try{const r=TemplateService_1.templateService.getSystemTemplate(e.params.id);if(!r){t.status(404).json({error:"Template not found"});return}t.json(r)}catch(e){console.error("Error fetching system template:",e);t.status(500).json({error:"Failed to fetch system template"})}});router.get("/user",[(0,express_validator_1.query)("tags").optional().isString().trim(),(0,express_validator_1.query)("search").optional().isString().trim().isLength({max:100}),(0,express_validator_1.query)("isPublic").optional().isBoolean().toBoolean(),(0,express_validator_1.query)("limit").optional().isInt({min:1,max:100}).toInt(),(0,express_validator_1.query)("offset").optional().isInt({min:0}).toInt()],(e,t)=>{if(handleValidationErrors(e,t))return;try{const r=e.headers["x-user-id"];if(!r){t.status(401).json({error:"Authentication required"});return}const s={tags:e.query.tags?e.query.tags.split(","):void 0,search:e.query.search,isPublic:"true"===e.query.isPublic,limit:e.query.limit?parseInt(e.query.limit):void 0,offset:e.query.offset?parseInt(e.query.offset):void 0};const o=TemplateService_1.templateService.getUserTemplates(r,s);t.json(o)}catch(e){console.error("Error fetching user templates:",e);t.status(500).json({error:"Failed to fetch user templates"})}});router.post("/user",[(0,express_validator_1.body)("name").isString().trim().notEmpty().isLength({min:1,max:100}),(0,express_validator_1.body)("description").optional().isString().trim().isLength({max:500}),(0,express_validator_1.body)("tags").optional().isArray({max:10}),(0,express_validator_1.body)("tags.*").optional().isString().trim().isLength({max:30}),(0,express_validator_1.body)("nodes").notEmpty(),(0,express_validator_1.body)("structure").optional().isObject(),(0,express_validator_1.body)("isPublic").optional().isBoolean()],(e,t)=>{if(!e.body.name||!e.body.nodes){t.status(400).json({error:"Name and nodes are required"});return}if(handleValidationErrors(e,t))return;try{const r=e.headers["x-user-id"];const s=e.headers["x-user-name"];if(!r){t.status(401).json({error:"Authentication required"});return}const{name:o,description:a,tags:i,nodes:n,structure:l,isPublic:u}=e.body;const d=TemplateService_1.templateService.createUserTemplate(r,{name:o,description:a||"",tags:i||[],author:r,authorName:s||"Unknown User",isPublic:u||false,nodes:n,structure:l});t.status(201).json(d)}catch(e){console.error("Error creating user template:",e);t.status(500).json({error:"Failed to create user template"})}});router.put("/user/:id",[(0,express_validator_1.param)("id").isString().trim().notEmpty().isLength({max:100}),(0,express_validator_1.body)("name").optional().isString().trim().isLength({min:1,max:100}),(0,express_validator_1.body)("description").optional().isString().trim().isLength({max:500}),(0,express_validator_1.body)("tags").optional().isArray({max:10}),(0,express_validator_1.body)("tags.*").optional().isString().trim().isLength({max:30}),(0,express_validator_1.body)("nodes").optional(),(0,express_validator_1.body)("structure").optional().isObject(),(0,express_validator_1.body)("isPublic").optional().isBoolean()],(e,t)=>{if(handleValidationErrors(e,t))return;try{const r=e.headers["x-user-id"];if(!r){t.status(401).json({error:"Authentication required"});return}const s=e.params.id;const o=e.body;const a=TemplateService_1.templateService.updateUserTemplate(r,s,o);if(!a){t.status(404).json({error:"Template not found or access denied"});return}t.json(a)}catch(e){console.error("Error updating user template:",e);t.status(500).json({error:"Failed to update user template"})}});router.delete("/user/:id",[(0,express_validator_1.param)("id").isString().trim().notEmpty().isLength({max:100})],(e,t)=>{if(handleValidationErrors(e,t))return;try{const r=e.headers["x-user-id"];if(!r){t.status(401).json({error:"Authentication required"});return}const s=e.params.id;if(!TemplateService_1.templateService.deleteUserTemplate(r,s)){t.status(404).json({error:"Template not found or access denied"});return}t.status(204).send()}catch(e){console.error("Error deleting user template:",e);t.status(500).json({error:"Failed to delete user template"})}});router.post("/fork/:id",[(0,express_validator_1.param)("id").isString().trim().notEmpty().isLength({max:100}),(0,express_validator_1.body)("name").isString().trim().notEmpty().isLength({min:1,max:100})],(e,t)=>{if(!e.body.name){t.status(400).json({error:"Name is required"});return}if(handleValidationErrors(e,t))return;try{const r=e.headers["x-user-id"];if(!r){t.status(401).json({error:"Authentication required"});return}const s=e.params.id;const{name:o}=e.body;const a=TemplateService_1.templateService.forkTemplate(r,s,o);if(!a){t.status(404).json({error:"Source template not found"});return}t.status(201).json(a)}catch(e){console.error("Error forking template:",e);t.status(500).json({error:"Failed to fork template"})}});router.get("/public",(e,t)=>{try{const e=[];t.json(e)}catch(e){console.error("Error fetching public templates:",e);t.status(500).json({error:"Failed to fetch public templates"})}});exports.default=router;