"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EffectPipeline=void 0;const child_process_1=require("child_process"),util_1=require("util"),uuid_1=require("uuid"),MediaAnalyzer_1=require("../media/MediaAnalyzer"),MediaFileManager_1=require("../media/MediaFileManager"),logger_1=require("../../utils/logger"),execPromise=(0,util_1.promisify)(child_process_1.exec);class EffectPipeline{effects=[];config;mediaAnalyzer;fileManager;constructor(config={},e,i){this.config={validateBeforeExecution:!0,optimizeFilterGraph:!0,maxProcessingTime:6e5,useHardwareAcceleration:!1,progressInterval:1e3,...config},this.mediaAnalyzer=e||new MediaAnalyzer_1.MediaAnalyzer,this.fileManager=i||new MediaFileManager_1.MediaFileManager}addEffect(e){this.effects.push(e),this.effects.sort((e,i)=>e.getPriority()-i.getPriority())}removeEffect(e){this.effects=this.effects.filter(i=>i.name!==e)}clearEffects(){this.effects=[]}getEffects(){return[...this.effects]}validatePipeline(e){const i=[],t=[];0===this.effects.length&&t.push("No effects in pipeline");for(const o of this.effects){const r=o.validate(e);r.valid||i.push(`Effect '${o.name}': ${r.errors?.join(", ")}`),r.warnings&&t.push(...r.warnings.map(e=>`Effect '${o.name}': ${e}`))}const o=this.effects.map(e=>({name:e.name,req:e.getRequirements()})),r=o.some(e=>e.req.requiresVideo),s=o.some(e=>e.req.requiresAudio);return r&&!e.inputs.video&&i.push("Pipeline requires video input but none provided"),s&&!e.inputs.audio&&i.push("Pipeline requires audio input but none provided"),{valid:0===i.length,errors:i.length>0?i:void 0,warnings:t.length>0?t:void 0}}async execute(e,i,t={}){const o=Date.now(),r=[],s=new Map;try{const n=await this.createContext(e,t);if(this.config.validateBeforeExecution){const e=this.validatePipeline(n);if(!e.valid)return{success:!1,errors:e.errors,warnings:e.warnings};e.warnings&&r.push(...e.warnings)}const a=this.buildCombinedFilterGraph(n),u=this.config.optimizeFilterGraph?this.optimizeFilterGraph(a):a,d=this.buildFFmpegCommand(n.inputs,i,u);logger_1.logger.info(`[EffectPipeline] Executing combined filter graph with ${this.effects.length} effects`),logger_1.logger.info(`[EffectPipeline] FFmpeg command: ${d}`);const l=Date.now();logger_1.logger.info("[EffectPipeline] Starting FFmpeg execution...");try{await execPromise(d,{timeout:this.config.maxProcessingTime,maxBuffer:10485760});const e=Date.now()-l;logger_1.logger.info(`[EffectPipeline] FFmpeg completed in ${e}ms`)}catch(e){const i=Date.now()-l;throw logger_1.logger.error(`[EffectPipeline] FFmpeg failed after ${i}ms`),e instanceof Error&&(logger_1.logger.error(`[EffectPipeline] Error details: ${e.message}`),"stderr"in e&&logger_1.logger.error(`[EffectPipeline] FFmpeg stderr: ${e.stderr}`)),e}for(const e of this.effects)s.set(e.name,{applied:!0,duration:0});return{success:!0,outputPath:i,executionTime:Date.now()-o,warnings:r.length>0?r:void 0,effectResults:s}}catch(e){return logger_1.logger.error("[EffectPipeline] Execution failed:",e),{success:!1,errors:[e instanceof Error?e.message:"Unknown error"],warnings:r.length>0?r:void 0,executionTime:Date.now()-o,effectResults:s}}}async createContext(e,i){const t=await this.mediaAnalyzer.probeMedia(e),o=t.streams.find(e=>"video"===e.codec_type),r=await this.mediaAnalyzer.getVideoMetadata(e);let s=t.streams.find(e=>"audio"===e.codec_type),n=!!s;if(i.inputAudioPath){s=(await this.mediaAnalyzer.probeMedia(i.inputAudioPath)).streams.find(e=>"audio"===e.codec_type),logger_1.logger.debug(`[EffectPipeline] Using separate audio input: ${i.inputAudioPath}`)}else n?logger_1.logger.debug("[EffectPipeline] Using audio track from video file"):logger_1.logger.warn("[EffectPipeline] No audio track found in video or separate audio input");const a=i.tempDir||await this.fileManager.createTempDirectory(process.env.TEMP_DIR||"./temp",`effects_${(0,uuid_1.v4)()}`);return{inputs:{video:e,audio:i.inputAudioPath||(n?e:void 0),additionalVideos:i.additionalVideoPaths,additionalAudios:i.additionalAudioPaths},metadata:{video:o,audio:s,duration:r.duration,width:r.width,height:r.height,fps:r.fps},tempDir:a,state:new Map}}buildCombinedFilterGraph(e){const i=[];let t="0:v",o=e.inputs.audio===e.inputs.video?"0:a":e.inputs.audio?"1:a":"0:a";for(const r of this.effects){const s=r.getFilterGraph(e),n=this.remapFilterLabels(s.nodes,r.name,t,o);i.push(...n),s.outputs.video&&(t=`[${r.name}_video_out]`),s.outputs.audio&&(o=`[${r.name}_audio_out]`)}return{nodes:i,outputs:{video:t,audio:o}}}remapFilterLabels(e,i,t,o){return e.map(e=>{const r={...e};return r.inputs&&(r.inputs=r.inputs.map(e=>{if("[video_in]"===e)return t;if("[audio_in]"===e)return o;if(e.match(/^\d+:[av]$/))return e;const r=e.replace(/^\[|\]$/g,"");return`[${i}_${r}]`})),r.outputs&&(r.outputs=r.outputs.map(e=>{if("[video_out]"===e)return`[${i}_video_out]`;if("[audio_out]"===e)return`[${i}_audio_out]`;const t=e.replace(/^\[|\]$/g,"");return`[${i}_${t}]`})),r.id=`${i}_${r.id}`,r})}optimizeFilterGraph(e){return e}buildFFmpegCommand(e,i,t){const o=[];e.video&&o.push(`-i "${e.video}"`),e.audio&&e.audio!==e.video&&o.push(`-i "${e.audio}"`),e.additionalVideos&&e.additionalVideos.forEach(e=>o.push(`-i "${e}"`)),e.additionalAudios&&e.additionalAudios.forEach(e=>o.push(`-i "${e}"`));const r=this.buildFilterComplexString(t),s=[];if(t.outputs.video){const e=t.outputs.video.startsWith("[")?t.outputs.video:`[${t.outputs.video}]`;s.push(`-map "${e}"`)}if(t.outputs.audio){const e=t.outputs.audio.startsWith("[")?t.outputs.audio:`[${t.outputs.audio}]`;s.push(`-map "${e}"`)}return["ffmpeg",...o,"-filter_complex",`"${r}"`,...s,"-c:v libx264 -preset fast -crf 23","-c:a aac -b:a 192k","-pix_fmt yuv420p","-movflags +faststart",`"${i}"`,"-y"].join(" ")}buildFilterComplexString(e){const i=[],t=[];for(const i of e.nodes)if(i.inputs)for(const e of i.inputs)e.includes("intro-sound_intro_raw")?t.push("[1:a]anull[intro-sound_intro_raw]"):e.includes("transition-sound_trans_sound")&&t.push("[1:a]anull[transition-sound_trans_sound]");const o=[...new Set(t)];o.length>0&&i.push(...o);for(const t of e.nodes){let e="";t.inputs&&t.inputs.length>0&&(e+=t.inputs.map(e=>e.match(/^\d+:[av]$/)?`[${e}]`:e.startsWith("[")?e:`[${e}]`).join("")),e+=t.filter;const o=Object.entries(t.params).map(([e,i])=>"string"==typeof i&&(i.includes(" ")||i.includes("|")||i.includes(":")||i.includes("(")||i.includes(")"))?`${e}='${i}'`:`${e}=${i}`).join(":");o&&(e+=`=${o}`),t.outputs&&t.outputs.length>0&&(e+=t.outputs.map(e=>e.startsWith("[")?e:`[${e}]`).join("")),i.push(e)}return i.join(";")}}exports.EffectPipeline=EffectPipeline;