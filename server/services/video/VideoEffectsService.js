"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,o,i){if(void 0===i)i=o;var r=Object.getOwnPropertyDescriptor(t,o);if(!r||("get"in r?!t.__esModule:r.writable||r.configurable))r={enumerable:true,get:function(){return t[o]}};Object.defineProperty(e,i,r)}:function(e,t,o,i){if(void 0===i)i=o;e[i]=t[o]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:true,value:t})}:function(e,t){e.default=t});var __importStar=this&&this.__importStar||function(){var ownKeys=function(e){ownKeys=Object.getOwnPropertyNames||function(e){var t=[];for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o))t[t.length]=o;return t};return ownKeys(e)};return function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o=ownKeys(e),i=0;i<o.length;i++)if("default"!==o[i])__createBinding(t,e,o[i]);__setModuleDefault(t,e);return t}}();Object.defineProperty(exports,"__esModule",{value:true});exports.VideoEffectsService=void 0;const child_process_1=require("child_process");const util_1=require("util");const path=__importStar(require("path"));const MediaAnalyzer_1=require("../media/MediaAnalyzer");const MediaFileManager_1=require("../media/MediaFileManager");const FFmpegCommandBuilder_1=require("../ffmpeg/FFmpegCommandBuilder");const logger_1=require("../../utils/logger");const execPromise=(0,util_1.promisify)(child_process_1.exec);class VideoEffectsService{mediaAnalyzer;fileManager;constructor(e,t){this.mediaAnalyzer=e||new MediaAnalyzer_1.MediaAnalyzer;this.fileManager=t||new MediaFileManager_1.MediaFileManager}async applyWhipZoom(e){const{videoPath:t,outputPath:o,zoomDuration:i,zoomType:r}=e;logger_1.logger.info("[VideoEffectsService] Applying whip zoom to video");const n=await this.mediaAnalyzer.probeMedia(t);const a=n.streams.find(e=>"video"===e.codec_type);const s=n.streams.find(e=>"audio"===e.codec_type);if(!a)throw new Error("No video stream found");const d=a.width||1280;const c=a.height||720;const g=this.parseFps(a.r_frame_rate||"24/1");const l=await this.mediaAnalyzer.getMediaDuration(t);const u=FFmpegCommandBuilder_1.FFmpegCommandBuilder.buildZoomCommand({inputPath:t,outputPath:o,zoomDuration:i,zoomType:r,width:d,height:c,fps:g,videoDuration:l,hasAudio:!!s});try{logger_1.logger.debug(`[VideoEffectsService] Executing zoom command for ${l}s video`);await execPromise(u);const e=await this.mediaAnalyzer.getMediaDuration(o);logger_1.logger.debug(`[VideoEffectsService] Zoom applied - Input: ${l.toFixed(2)}s, Output: ${e.toFixed(2)}s`);if(Math.abs(e-l)>.5)logger_1.logger.warn(`[VideoEffectsService] Duration mismatch after zoom: expected ${l}s, got ${e}s`);return o}catch(e){logger_1.logger.error("[VideoEffectsService] Failed to apply zoom effect:",e);logger_1.logger.error(`[VideoEffectsService] FFmpeg command was: ${u}`);return t}}async addIntroSound(e){const{videoPath:t,introSoundPath:o,outputPath:i,soundVolume:r}=e;logger_1.logger.info("[VideoEffectsService] Adding intro sound to video");const n=this.fileManager.resolvePath(o);if(!await this.fileManager.fileExists(n)){logger_1.logger.warn(`[VideoEffectsService] Intro sound file not found at ${n}, skipping`);return t}logger_1.logger.debug(`[VideoEffectsService] Intro sound file found at ${n}`);const a=FFmpegCommandBuilder_1.FFmpegCommandBuilder.buildIntroSoundCommand({videoPath:t,introSoundPath:n,outputPath:i,soundVolume:r});try{await execPromise(a);logger_1.logger.debug(`[VideoEffectsService] Intro sound added to ${i}`);return i}catch(e){logger_1.logger.error("[VideoEffectsService] Failed to add intro sound:",e);logger_1.logger.error(`[VideoEffectsService] FFmpeg command was: ${a}`);return t}}async concatenateWithTransitions(e,t){const{segmentPaths:o,transitionSoundPath:i,soundVolume:r,tempDir:n}=e;logger_1.logger.info(`[VideoEffectsService] Concatenating ${o.length} segments with transition sounds`);const a=this.fileManager.resolvePath(i);if(!await this.fileManager.fileExists(a)){logger_1.logger.warn(`[VideoEffectsService] Transition sound file not found at ${a}, falling back to regular concatenation`);return t(o,n)}logger_1.logger.debug(`[VideoEffectsService] Transition sound file found at ${a}`);const s=[];let d=0;for(let e=0;e<o.length-1;e++){const t=await this.mediaAnalyzer.getMediaDuration(o[e]);d+=t;s.push(d);logger_1.logger.debug(`[VideoEffectsService] Segment ${e+1}: duration=${t.toFixed(3)}s, transition at ${d.toFixed(3)}s`)}const c=await this.mediaAnalyzer.getMediaDuration(o[o.length-1]);logger_1.logger.debug(`[VideoEffectsService] Segment ${o.length}: duration=${c.toFixed(3)}s (no transition after)`);logger_1.logger.info(`[VideoEffectsService] Transition points: ${s.map(e=>e.toFixed(3)+"s").join(", ")}`);const g=d+c;logger_1.logger.debug(`[VideoEffectsService] Total expected duration: ${g.toFixed(3)}s`);const l=path.join(n,"concat_with_transitions.txt");await this.fileManager.createConcatListFile(o,l);const u=path.join(n,"concatenated_with_transitions.mp4");const f=FFmpegCommandBuilder_1.FFmpegCommandBuilder.buildTransitionCommand({concatListPath:l,transitionSoundPath:a,outputPath:u,transitionTimestamps:s,soundVolume:r});try{logger_1.logger.debug("[VideoEffectsService] Running concatenation with transitions");await execPromise(f);const e=await this.mediaAnalyzer.getMediaDuration(u);logger_1.logger.info(`[VideoEffectsService] Concatenation with transitions complete. Duration: ${e.toFixed(2)}s`);await this.fileManager.deleteFile(l);return u}catch(e){logger_1.logger.error("[VideoEffectsService] Concatenation with transitions failed:",e);logger_1.logger.warn("[VideoEffectsService] Falling back to regular concatenation");return t(o,n)}}parseFps(e){if(e.includes("/")){const[t,o]=e.split("/").map(Number);return o>0?t/o:30}return parseFloat(e)||30}}exports.VideoEffectsService=VideoEffectsService;