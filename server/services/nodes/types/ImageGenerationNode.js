"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.ImageGenerationNode=void 0;const BaseNode_1=require("./BaseNode");const DataTypes_1=require("./DataTypes");const ReplicateImageClient_1=require("../../ai/image/providers/replicate/ReplicateImageClient");const logger_1=require("../../../utils/logger");class ImageGenerationNode extends BaseNode_1.BaseNode{replicateClient=null;constructor(e){super({...e,type:"image_generation"});this.replicateClient=new ReplicateImageClient_1.ReplicateImageClient}defineDefaultPorts(){return{inputs:[{name:"imagePrompts",type:DataTypes_1.DataType.ARRAY,description:"Array of image prompt objects from ImagePromptNode",required:true},{name:"model",type:DataTypes_1.DataType.TEXT,description:"Image generation model (seedream-3, flux-dev-lora, imagen-3)",required:false,defaultValue:"seedream-3"},{name:"aspectRatio",type:DataTypes_1.DataType.TEXT,description:"Aspect ratio for generated images",required:false,defaultValue:"16:9"},{name:"guidanceScale",type:DataTypes_1.DataType.NUMBER,description:"How strongly to follow the prompt (1-20)",required:false,defaultValue:7.5},{name:"numInferenceSteps",type:DataTypes_1.DataType.NUMBER,description:"Number of inference steps",required:false,defaultValue:50},{name:"outputFormat",type:DataTypes_1.DataType.TEXT,description:"Output image format (png, webp, jpeg)",required:false,defaultValue:"webp"},{name:"loraWeights",type:DataTypes_1.DataType.TEXT,description:"LoRA weights URL",required:false},{name:"loraScale",type:DataTypes_1.DataType.NUMBER,description:"LoRA scale factor",required:false,defaultValue:1},{name:"safetyFilter",type:DataTypes_1.DataType.BOOLEAN,description:"Enable safety filter",required:false,defaultValue:true}],outputs:[{name:"images",type:DataTypes_1.DataType.ARRAY,description:"Array of generated images with metadata"},{name:"totalCost",type:DataTypes_1.DataType.NUMBER,description:"Total cost of image generation"}]}}async execute(e,t){try{if(!e.imagePrompts||0===e.imagePrompts.length)throw new Error("Image prompts are required");this.updateProgress(10);const t=e.model??"seedream-3";const a=e.aspectRatio??"16:9";const o=e.outputFormat??"webp";const r=await this.submitImageJobs(e.imagePrompts,t,a,o,e);const{images:i,totalCost:s}=await this.pollForImageCompletion(r,a,o,t);this.updateProgress(100);logger_1.logger.info(`🖼️ [ImageGenerationNode] Completed with model ${t}:`,{imagesCount:i.length,totalCost:s,images:i.map((e,t)=>({index:t,sectionId:e.sectionId,hasImage:!!e.image,imagePath:e.image?.path,imageFormat:e.image?.format,imageDimensions:e.image?`${e.image.width}x${e.image.height}`:"unknown"}))});return{success:true,data:{images:i,totalCost:s},metadata:{nodeId:this.config.id,model:t,imageCount:i.length,aspectRatio:a}}}catch(e){return{success:false,error:e instanceof Error?e.message:"Failed to generate images"}}}async submitImageJobs(e,t,a,o,r){const i=[];const s=20/e.length;for(let n=0;n<e.length;n++){const l=e[n];try{const e={prompt:l.prompt,aspectRatio:a,guidanceScale:r.guidanceScale,numInferenceSteps:r.numInferenceSteps,outputFormat:o,loraWeights:r.loraWeights,loraScale:r.loraScale,safetyFilter:r.safetyFilter};if(!this.replicateClient)throw new Error("ReplicateClient not initialized. Check API token configuration.");const m=await this.replicateClient.submitImageJob(t,e);logger_1.logger.debug(`[ImageGenerationNode] Submitted job for section ${l.sectionId}:`,{jobId:m.id,status:m.status,model:t});i.push({sectionId:l.sectionId,jobId:m.id,promptData:l,modelType:t});this.updateProgress(10+(n+1)*s)}catch(e){logger_1.logger.error(`[ImageGenerationNode] Failed to submit job for section ${l.sectionId}:`,e);throw e}}return i}async pollForImageCompletion(e,t,a,o){const r=[];let i=0;const s=Date.now();const n=new Map;const l=[...e];while(l.length>0&&Date.now()-s<18e4){const s=[];for(const e of l){const l=await this.processJobStatus(e,t,a,o,n);if(l.completed&&l.imageData){r.push(l.imageData);i+=l.cost||0}else if(l.retry)s.push(e);else throw new Error(l.error??"Image generation failed")}const m=30+r.length/e.length*60;this.updateProgress(m);l.length=0;l.push(...s);if(l.length>0)await new Promise(e=>setTimeout(e,3e3))}if(l.length>0)throw new Error(`Image generation timed out for ${l.length} images`);return{images:r,totalCost:i}}async processJobStatus(e,t,a,o,r){try{logger_1.logger.debug(`[ImageGenerationNode] Checking job status for ${e.jobId} (model: ${e.modelType})`);const r=await(this.replicateClient?.checkJobStatus(e.modelType,e.jobId));logger_1.logger.debug(`[ImageGenerationNode] Job ${e.jobId} status result:`,{status:r?.status,hasUrl:!!r?.url,modelType:e.modelType});if(!r)return{completed:false,retry:true};if("completed"===r.status&&r.url){const i=this.getDimensionsFromAspectRatio(t);const s={path:r.url,mimeType:`image/${a}`,size:0,width:i.width,height:i.height,format:a,metadata:{prompt:e.promptData.prompt,negativePrompt:e.promptData.negativePrompt,model:o,sectionId:e.promptData.sectionId}};return{completed:true,retry:false,imageData:{sectionId:e.promptData.sectionId,image:s,prompt:e.promptData.prompt,duration:e.promptData.duration},cost:this.replicateClient?.calculateTotalCost(e.modelType,1)??0}}else if("failed"===r.status){logger_1.logger.error(`[ImageGenerationNode] Image generation failed for section ${e.sectionId}: ${r.error}`);return{completed:false,retry:false,error:r.error??"Image generation failed"}}else return{completed:false,retry:true}}catch(t){logger_1.logger.error(`[ImageGenerationNode] Error checking status for job ${e.jobId}:`,t);const a=r.get(e.jobId)??0;if(a<3){r.set(e.jobId,a+1);return{completed:false,retry:true}}else return{completed:false,retry:false,error:`Failed to check image status after 3 retries: ${t instanceof Error?t.message:"Unknown error"}`}}}getDimensionsFromAspectRatio(e){const t={"16:9":{width:1920,height:1080},"9:16":{width:1080,height:1920},"1:1":{width:1024,height:1024},"4:3":{width:1024,height:768},"3:4":{width:768,height:1024}};return t[e]||t["16:9"]}validateCustom(e){const t=e;if(!t.imagePrompts||!Array.isArray(t.imagePrompts))return"Image prompts array is required";if(0===t.imagePrompts.length)return"At least one image prompt is required";for(let e=0;e<t.imagePrompts.length;e++){const a=t.imagePrompts[e];if(!a.prompt||!a.sectionId)return`Image prompt at index ${e} is missing required fields (prompt, sectionId)`}if(t.model){const e=["seedream-3","flux-dev-lora","imagen-3"];if(!e.includes(t.model))return`Invalid model. Must be one of: ${e.join(", ")}`}if(t.outputFormat){const e=["png","webp","jpeg"];if(!e.includes(t.outputFormat))return`Invalid output format. Must be one of: ${e.join(", ")}`}return null}}exports.ImageGenerationNode=ImageGenerationNode;