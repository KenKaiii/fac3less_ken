"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(t,e,i,a){if(void 0===a)a=i;var o=Object.getOwnPropertyDescriptor(e,i);if(!o||("get"in o?!e.__esModule:o.writable||o.configurable))o={enumerable:true,get:function(){return e[i]}};Object.defineProperty(t,a,o)}:function(t,e,i,a){if(void 0===a)a=i;t[a]=e[i]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:true,value:e})}:function(t,e){t.default=e});var __importStar=this&&this.__importStar||function(){var ownKeys=function(t){ownKeys=Object.getOwnPropertyNames||function(t){var e=[];for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i))e[e.length]=i;return e};return ownKeys(t)};return function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i=ownKeys(t),a=0;a<i.length;a++)if("default"!==i[a])__createBinding(e,t,i[a]);__setModuleDefault(e,t);return e}}();Object.defineProperty(exports,"__esModule",{value:true});exports.FinalOutputNode=void 0;const BaseNode_1=require("./BaseNode");const DataTypes_1=require("../../../shared/types/DataTypes");const OutputConfigs_1=require("./OutputConfigs");const fs_1=require("fs");const path=__importStar(require("path"));const uuid_1=require("uuid");const child_process_1=require("child_process");const util_1=require("util");const logger_1=require("../../../utils/logger");const execAsync=(0,util_1.promisify)(child_process_1.exec);class FinalOutputNode extends BaseNode_1.BaseNode{outputDir;constructor(t){super({...t,type:"final_output"});this.outputDir=process.env.FINAL_OUTPUT_DIR||"./output/final"}defineDefaultPorts(){return{inputs:[{name:"videoWithCaptions",type:DataTypes_1.DataType.VIDEO,description:"Video with embedded captions from CaptionGenerationNode",required:false},{name:"editedVideo",type:DataTypes_1.DataType.VIDEO,description:"Edited video from EditingNode (if no captions)",required:false},{name:"outputFormat",type:DataTypes_1.DataType.TEXT,description:"Output video format (mp4, webm, mov)",required:false,defaultValue:"mp4"},{name:"quality",type:DataTypes_1.DataType.TEXT,description:"Output quality preset",required:false,defaultValue:"high"},{name:"optimization",type:DataTypes_1.DataType.TEXT,description:"Optimization strategy (size, quality, balanced)",required:false,defaultValue:"balanced"},{name:"watermark",type:DataTypes_1.DataType.OBJECT,description:"Watermark configuration",required:false},{name:"metadata",type:DataTypes_1.DataType.OBJECT,description:"Video metadata",required:false},{name:"outputPath",type:DataTypes_1.DataType.TEXT,description:"Custom output path",required:false},{name:"uploadTo",type:DataTypes_1.DataType.TEXT,description:"Upload destination",required:false,defaultValue:"local"}],outputs:OutputConfigs_1.OutputPresets.finalOutput()}}async execute(t,e){try{this.updateProgress(5);const e=t.videoWithCaptions||t.editedVideo;if(!e||!e.path)throw new Error("No video provided for final processing");const i="true"===process.env.USE_MOCK_SERVICES||e.path.startsWith("/mock/");if(!i)await fs_1.promises.mkdir(this.outputDir,{recursive:true});const a=i?`/mock/temp_${(0,uuid_1.v4)()}`:path.join(this.outputDir,`temp_${(0,uuid_1.v4)()}`);if(!i)await fs_1.promises.mkdir(a,{recursive:true});try{this.updateProgress(10);const o=await this.optimizeVideo(e.path,a,t.outputFormat||"mp4",t.quality||"high",t.optimization||"balanced");this.updateProgress(40);let r=o;if(t.watermark){r=await this.addWatermark(o,a,t.watermark);this.updateProgress(60)}const s=await this.addMetadata(r,a,t.outputFormat||"mp4",t.metadata);this.updateProgress(70);const u=`final_video_${(0,uuid_1.v4)()}.${t.outputFormat||"mp4"}`;const n=t.outputPath||(i?`/mock/${u}`:path.join(this.outputDir,u));if(!i)await fs_1.promises.rename(s,n);this.updateProgress(80);let p;if(i)p={originalSize:10485760,finalSize:5242880,compressionRatio:2};else{const t=await fs_1.promises.stat(e.path);const i=await fs_1.promises.stat(n);p={originalSize:t.size,finalSize:i.size,compressionRatio:t.size/i.size}}let d;if(t.uploadTo&&"local"!==t.uploadTo&&"none"!==t.uploadTo){d=await this.uploadVideo(n,t.uploadTo);this.updateProgress(95)}let c;let l;if(i){c=e.duration||30;l={width:e.width||1920,height:e.height||1080}}else{c=await this.getVideoDuration(n);l=await this.getVideoDimensions(n)}if(!i)await fs_1.promises.rm(a,{recursive:true,force:true});this.updateProgress(100);return{success:true,data:{finalVideo:{path:n,mimeType:`video/${t.outputFormat||"mp4"}`,size:p.finalSize,duration:c,width:l.width,height:l.height,fps:e.fps,format:t.outputFormat||"mp4",metadata:{...e.metadata,...t.metadata,optimized:true,quality:t.quality||"high",hasWatermark:!!t.watermark}},outputPath:n,fileSize:p.finalSize,optimizationStats:p,uploadUrl:d},metadata:{nodeId:this.config.id,format:t.outputFormat||"mp4",quality:t.quality||"high",optimization:t.optimization||"balanced"}}}catch(t){try{await fs_1.promises.rm(a,{recursive:true,force:true})}catch(t){logger_1.logger.error("[FinalOutputNode] Failed to clean up temp directory:",t)}throw t}}catch(t){return{success:false,error:t instanceof Error?t.message:"Failed to process final video"}}}async optimizeVideo(t,e,i,a,o){const r=e.startsWith("/mock/")?`/mock/optimized.${i}`:path.join(e,`optimized.${i}`);if("true"===process.env.USE_MOCK_SERVICES||t.startsWith("/mock/"))return r;let s=`ffmpeg -i "${t}"`;const u={low:{crf:28,bitrate:"1M"},medium:{crf:23,bitrate:"2M"},high:{crf:18,bitrate:"4M"},ultra:{crf:15,bitrate:"8M"}}[a];if("size"===o)s+=` -c:v libx264 -preset slow -crf ${u.crf+5} -c:a aac -b:a 128k`;else if("quality"===o)s+=` -c:v libx264 -preset veryslow -crf ${u.crf} -c:a aac -b:a 192k`;else s+=` -c:v libx264 -preset medium -crf ${u.crf} -c:a aac -b:a 160k`;if("webm"===i)s=s.replace("libx264","libvpx-vp9");else if("mov"===i)s+=" -f mov";s+=` "${r}"`;await execAsync(s);return r}async addWatermark(t,e,i){if(!i)return t;const a=e.startsWith("/mock/")?"/mock/watermarked.mp4":path.join(e,"watermarked.mp4");if("true"===process.env.USE_MOCK_SERVICES||t.startsWith("/mock/"))return a;let o=`ffmpeg -i "${t}"`;if(i.text){const t=this.getWatermarkPosition(i.position||"bottom-right");const e=i.opacity||.7;o+=` -vf "drawtext=text='${i.text}':fontcolor=white@${e}:fontsize=24:${t}"`}else if(i.imagePath){const t=this.getOverlayPosition(i.position||"bottom-right");const e=i.opacity||.7;o+=` -i "${i.imagePath}" -filter_complex "[1:v]format=rgba,colorchannelmixer=aa=${e}[logo];[0:v][logo]overlay=${t}"`}o+=` -c:a copy "${a}"`;await execAsync(o);return a}getWatermarkPosition(t){const e={"top-left":"x=10:y=10","top-right":"x=w-tw-10:y=10","bottom-left":"x=10:y=h-th-10","bottom-right":"x=w-tw-10:y=h-th-10",center:"x=(w-tw)/2:y=(h-th)/2"};return e[t]||e["bottom-right"]}getOverlayPosition(t){const e={"top-left":"10:10","top-right":"W-w-10:10","bottom-left":"10:H-h-10","bottom-right":"W-w-10:H-h-10",center:"(W-w)/2:(H-h)/2"};return e[t]||e["bottom-right"]}async addMetadata(t,e,i,a){const o=e.startsWith("/mock/")?`/mock/final.${i}`:path.join(e,`final.${i}`);if("true"===process.env.USE_MOCK_SERVICES||t.startsWith("/mock/"))return o;let r=`ffmpeg -i "${t}" -c copy`;if(a){if(a.title)r+=` -metadata title="${a.title}"`;if(a.description)r+=` -metadata comment="${a.description}"`;if(a.author)r+=` -metadata artist="${a.author}"`;if(a.copyright)r+=` -metadata copyright="${a.copyright}"`;if(a.tags&&a.tags.length>0)r+=` -metadata keywords="${a.tags.join(", ")}"`}r+=` "${o}"`;await execAsync(r);return o}async uploadVideo(t,e){return`${e}://placeholder-url`}async getVideoDuration(t){const e=`ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${t}"`;const{stdout:i}=await execAsync(e);return parseFloat(i.trim())}async getVideoDimensions(t){const e=`ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of json "${t}"`;const{stdout:i}=await execAsync(e);const a=JSON.parse(i).streams[0];return{width:a.width,height:a.height}}validateCustom(t){const e=t;if(!e.videoWithCaptions&&!e.editedVideo)return"Either videoWithCaptions or editedVideo is required";if(e.outputFormat&&!["mp4","webm","mov"].includes(e.outputFormat))return"Invalid output format. Must be mp4, webm, or mov";if(e.quality&&!["low","medium","high","ultra"].includes(e.quality))return"Invalid quality. Must be low, medium, high, or ultra";if(e.optimization&&!["size","quality","balanced"].includes(e.optimization))return"Invalid optimization. Must be size, quality, or balanced";if(e.uploadTo&&!["local","s3","youtube","none"].includes(e.uploadTo))return"Invalid upload destination. Must be local, s3, youtube, or none";return null}}exports.FinalOutputNode=FinalOutputNode;