"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(){var ownKeys=function(e){return ownKeys=Object.getOwnPropertyNames||function(e){var t=[];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[t.length]=i);return t},ownKeys(e)};return function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i=ownKeys(e),s=0;s<i.length;s++)"default"!==i[s]&&__createBinding(t,e,i[s]);return __setModuleDefault(t,e),t}}();Object.defineProperty(exports,"__esModule",{value:!0}),exports.EditingNodeV2=void 0;const BaseNode_1=require("./BaseNode"),DataTypes_1=require("../../../shared/types/DataTypes"),path=__importStar(require("path")),uuid_1=require("uuid"),child_process_1=require("child_process"),util_1=require("util"),ffmpeg_service_1=require("../../ffmpeg.service"),MediaFileManager_1=require("../../media/MediaFileManager"),MediaAnalyzer_1=require("../../media/MediaAnalyzer"),AudioVideoSyncService_1=require("../../sync/AudioVideoSyncService"),EffectPipeline_1=require("../../effects/EffectPipeline"),effects_1=require("../../effects/effects/index"),logger_1=require("../../../utils/logger"),execPromise=(0,util_1.promisify)(child_process_1.exec);class EditingNodeV2 extends BaseNode_1.BaseNode{outputDir;currentProgress=0;progressWeights={download:15,syncSegments:35,effects:20,concatenate:20,finalize:10};ffmpegService;fileManager;mediaAnalyzer;audioVideoSyncService;effectPipeline;constructor(config){super({...config,type:"editing"}),this.outputDir=process.env.EDITED_OUTPUT_DIR||"./output/edited",this.ffmpegService=new ffmpeg_service_1.FFmpegService,this.fileManager=new MediaFileManager_1.MediaFileManager,this.mediaAnalyzer=new MediaAnalyzer_1.MediaAnalyzer(this.ffmpegService),this.audioVideoSyncService=new AudioVideoSyncService_1.AudioVideoSyncService(this.mediaAnalyzer,this.fileManager),this.effectPipeline=new EffectPipeline_1.EffectPipeline}defineDefaultPorts(){return{inputs:[{name:"videos",type:DataTypes_1.DataType.ARRAY,description:"Array of video segments from VideoGenerationNode",required:!0},{name:"audioFiles",type:DataTypes_1.DataType.ARRAY,description:"Array of audio narrations from AudioGenerationNode",required:!0},{name:"transcripts",type:DataTypes_1.DataType.ARRAY,description:"Array of transcripts from AudioGenerationNode",required:!0},{name:"outputPath",type:DataTypes_1.DataType.TEXT,description:"Custom output path for the edited video",required:!1},{name:"enableWhipZoom",type:DataTypes_1.DataType.BOOLEAN,description:"Apply zoom effect to first video",required:!1,defaultValue:!1},{name:"zoomDuration",type:DataTypes_1.DataType.NUMBER,description:"Duration of zoom effect in seconds",required:!1,defaultValue:.3},{name:"zoomType",type:DataTypes_1.DataType.TEXT,description:"Direction of zoom (in or out)",required:!1,defaultValue:"out"},{name:"enableIntroSound",type:DataTypes_1.DataType.BOOLEAN,description:"Add intro sound to first segment",required:!1,defaultValue:!1},{name:"enableTransitionSounds",type:DataTypes_1.DataType.BOOLEAN,description:"Add transition sounds between segments",required:!1,defaultValue:!1},{name:"introSoundPath",type:DataTypes_1.DataType.TEXT,description:"Path to intro sound file",required:!1,defaultValue:"assets/sounds/intro-whoosh.mp3"},{name:"transitionSoundPath",type:DataTypes_1.DataType.TEXT,description:"Path to transition sound file",required:!1,defaultValue:"assets/sounds/whoosh.mp3"},{name:"soundEffectVolume",type:DataTypes_1.DataType.NUMBER,description:"Volume for intro sound effect (0-1)",required:!1,defaultValue:.8},{name:"transitionSoundVolume",type:DataTypes_1.DataType.NUMBER,description:"Volume for transition sound effects (0-1)",required:!1,defaultValue:.6}],outputs:[{name:"editedVideo",type:DataTypes_1.DataType.VIDEO,description:"The final edited video with all segments combined"},{name:"duration",type:DataTypes_1.DataType.NUMBER,description:"Total duration of the edited video in seconds"},{name:"outputPath",type:DataTypes_1.DataType.TEXT,description:"Path to the edited video file"},{name:"adjustedTranscripts",type:DataTypes_1.DataType.ARRAY,description:"Transcripts with adjusted timestamps"}]}}async execute(e,t){const i=this.validateCustom(e);if(i)return{success:!1,error:i};logger_1.logger.info("[EditingNodeV2] Starting video editing process");try{this.currentProgress=0,await this.updateProgress(this.currentProgress);const t=(0,uuid_1.v4)(),i=await this.setupWorkspace(t);await this.updateProgress(5);const{videoPaths:s,audioPaths:a}=await this.downloadMediaFiles(e,i);await this.updateProgress(this.progressWeights.download);const r=await this.processWithNewPipeline(e,s,a,i),{finalVideoPath:o,syncSegments:n}=r;return{success:!0,data:await this.finalizeOutput(e,o,n,t,i)}}catch(e){if(logger_1.logger.error("[EditingNodeV2] Error during video editing:",e),e instanceof Error){if(e.message.includes("ENOSPC"))return{success:!1,error:"Insufficient disk space for video editing"};(e.message.includes("ffmpeg")||e.message.includes("FFmpeg"))&&logger_1.logger.error("[EditingNodeV2] FFmpeg error details:",e.message)}return{success:!1,error:e instanceof Error?e.message:"Failed to edit video"}}}async processWithNewPipeline(e,t,i,s){if(logger_1.logger.info("[EditingNodeV2] Using new effect pipeline"),e.enableWhipZoom&&t.length>0){const i=await this.applyLegacyZoomToFirstVideo(t[0],s,e.zoomDuration||.3);t[0]=i}await this.updateProgress(this.progressWeights.download+10);const{processedPaths:a,syncSegments:r}=await this.audioVideoSyncService.smartAudioVideoSync(i,t,s);if(await this.updateProgress(this.progressWeights.download+this.progressWeights.syncSegments),0===a.length)throw new Error("No processed segments available");const o=[];if(e.enableIntroSound&&o.push(new effects_1.IntroSoundEffect({soundPath:e.introSoundPath,volume:e.soundEffectVolume,duration:2,fadeIn:.1,fadeOut:.1},this.fileManager)),e.enableTransitionSounds&&a.length>1){const t=[];let i=0;const s=e.transitionDuration||.15;for(let e=0;e<a.length-1;e++){const r=await this.mediaAnalyzer.getMediaDuration(a[e]),o=i+r-s;t.push(o),i+=r-s}o.push(new effects_1.TransitionSoundEffect({soundPath:e.transitionSoundPath,volume:e.transitionSoundVolume,transitionTimestamps:t,transitionDuration:.5},this.fileManager))}let n;if(1===a.length){const e=path.join(s,"final_with_effects.mp4");if(o.length>0){await this.updateProgress(this.progressWeights.download+this.progressWeights.syncSegments+10),o.forEach(e=>this.effectPipeline.addEffect(e));const t=await this.effectPipeline.execute(a[0],e,{tempDir:s});if(!t.success)throw new Error(`Effect pipeline failed: ${t.errors?.join(", ")}`);n=e}else n=a[0]}else{await this.updateProgress(this.progressWeights.download+this.progressWeights.syncSegments+10);const t=await this.concatenateSegments(a,s,e);if(o.length>0){const e=path.join(s,"final_with_effects.mp4");await this.updateProgress(this.progressWeights.download+this.progressWeights.syncSegments+this.progressWeights.concatenate),o.forEach(e=>this.effectPipeline.addEffect(e));const i=await this.effectPipeline.execute(t,e,{tempDir:s});if(!i.success)throw new Error(`Effect pipeline failed: ${i.errors?.join(", ")}`);n=e}else n=t}return await this.updateProgress(this.progressWeights.download+this.progressWeights.syncSegments+this.progressWeights.effects+this.progressWeights.concatenate),{finalVideoPath:n,syncSegments:r}}async setupWorkspace(e){const t=await this.fileManager.createTempDirectory(this.outputDir,`temp_${e}`);return await this.fileManager.ensureDirectory(this.outputDir),t}async applyLegacyZoomToFirstVideo(e,t,i){logger_1.logger.info(`[EditingNodeV2] Applying legacy zoom to first video: duration=${i}s`);const s=path.join(t,"first_video_zoomed.mp4"),a=await this.mediaAnalyzer.probeMedia(e),r=a.streams.find(e=>"video"===e.codec_type),o=a.streams.find(e=>"audio"===e.codec_type);if(!r)throw new Error("No video stream found");const n=r.width||720,d=r.height||1280,p=Math.round(24*i),u=`ffmpeg -i "${e}" -filter_complex "[0:v]scale=${3*n}:${3*d},zoompan=z='if(lte(on,${p}),3-2*on/${p},1)':x='(iw-iw/zoom)/2':y='(ih-ih/zoom)/2':d=1:s=${n}x${d}:fps=24[v]" -map "[v]" ${o?"-map 0:a":""} -c:v libx264 -preset fast -crf 23 ${o?"-c:a copy":""} -pix_fmt yuv420p -movflags +faststart "${s}" -y`;try{return await execPromise(u),logger_1.logger.info("[EditingNodeV2] Legacy zoom applied successfully"),s}catch(t){return logger_1.logger.error("[EditingNodeV2] Failed to apply legacy zoom:",t),e}}async downloadMediaFiles(e,t){return{videoPaths:await this.fileManager.downloadFiles(e.videos.map(e=>e.video.path),t,"video"),audioPaths:await this.fileManager.downloadFiles(e.audioFiles.map(e=>e.path),t,"audio")}}async concatenateSegments(e,t,i){if(logger_1.logger.info(`[EditingNodeV2] Concatenating ${e.length} segments with ${i.transitionType||"diagonal"} transitions`),1===e.length)return e[0];const s=path.join(t,"concatenated_with_transitions.mp4");let a="";const r=e.map(e=>`-i "${e}"`).join(" ");for(let t=0;t<e.length;t++)a+=`[${t}:v]scale=720:1280:force_original_aspect_ratio=decrease,pad=720:1280:-1:-1,setsar=1[v${t}]; `,a+=`[${t}:a]aformat=sample_rates=44100:channel_layouts=stereo[a${t}]; `;let o="[v0]",n="[a0]",d=0;for(let t=0;t<e.length-1;t++){const s=this.getTransitionForIndex(t,i.transitionType||"diagonal"),r=i.transitionDuration||.15,p=await this.mediaAnalyzer.getMediaDuration(e[t]),u=d+p-r;d+=p-r;const c=t===e.length-2?"[vout]":`[vtrans${t}]`;a+=`${o}[v${t+1}]xfade=transition=${s}:duration=${r}:offset=${u}${c}; `;const l=t===e.length-2?"[aout]":`[atrans${t}]`;a+=`${n}[a${t+1}]acrossfade=d=${r}:c1=tri:c2=tri${l}; `,o=c,n=l}const p=`ffmpeg ${r} -filter_complex "${a}" -map "[vout]" -map "[aout]" -c:v libx264 -preset fast -crf 23 -c:a aac -b:a 128k "${s}"`;logger_1.logger.debug(`[EditingNodeV2] Transition command: ${p}`);try{await execPromise(p)}catch(e){throw logger_1.logger.error("[EditingNodeV2] FFmpeg transition error:",e),e}return s}getTransitionForIndex(e,t){const i=["diagtl","diagtr","diagbl","diagbr"],s=["slideleft","slideright","slideup","slidedown"],a=["wipeleft","wiperight","wipeup","wipedown"],r=["squeezeh","squeezev"],o=["diagtl","slideright","wipeup","squeezeh","diagbr","slideleft","wipedown","squeezev","diagtr","slideup","wiperight","dissolve","diagbl","slidedown","wipeleft","radial"];switch(t){case"diagonal":default:return i[e%4];case"slide":return s[e%4];case"wipe":return a[e%4];case"squeeze":return r[e%2];case"mixed":return o[e%o.length]}}async finalizeOutput(e,t,i,s,a){const r=`edited_${s}.mp4`,o=e.outputPath||path.join(this.outputDir,r);await this.fileManager.moveFile(t,o);const n=await this.mediaAnalyzer.getVideoMetadata(o);logger_1.logger.info(`[EditingNodeV2] Calculating adjusted transcripts: ${e.transcripts.length} transcripts, ${i.length} sync segments`),logger_1.logger.debug("[EditingNodeV2] Input transcripts:",e.transcripts.map((e,t)=>({index:t,text:e.substring(0,50)+"...",length:e.length})));const d=this.audioVideoSyncService.calculateAdjustedTranscripts(e.transcripts,i);logger_1.logger.info(`[EditingNodeV2] Adjusted transcripts created: ${d.length} transcripts`),logger_1.logger.debug("[EditingNodeV2] Adjusted transcript timings:",d.map((e,t)=>({index:t,text:e.text.substring(0,50)+"...",startTime:e.startTime,endTime:e.endTime,duration:e.endTime-e.startTime}))),await this.updateProgress(this.progressWeights.download+this.progressWeights.syncSegments+this.progressWeights.effects+this.progressWeights.concatenate+this.progressWeights.finalize),await this.fileManager.cleanupDirectory(a),await this.updateProgress(100);const p={editedVideo:{path:o,mimeType:"video/mp4",size:(await this.fileManager.getFileStats(o)).size,duration:n.duration,width:n.width,height:n.height,fps:n.fps,format:"mp4"},duration:n.duration,outputPath:o,adjustedTranscripts:d};return logger_1.logger.info(`[EditingNodeV2] Video editing completed. Output: ${o}`),p}validateCustom(e){return e.videos&&0!==e.videos.length?e.audioFiles&&0!==e.audioFiles.length?e.transcripts&&0!==e.transcripts.length?e.videos.length!==e.audioFiles.length?"Mismatch between number of videos and audio files":null:"No transcripts provided":"No audio files provided":"No video segments provided"}}exports.EditingNodeV2=EditingNodeV2;