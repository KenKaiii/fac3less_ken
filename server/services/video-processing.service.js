"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(t,e,i,r){if(void 0===r)r=i;var a=Object.getOwnPropertyDescriptor(e,i);if(!a||("get"in a?!e.__esModule:a.writable||a.configurable))a={enumerable:true,get:function(){return e[i]}};Object.defineProperty(t,r,a)}:function(t,e,i,r){if(void 0===r)r=i;t[r]=e[i]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:true,value:e})}:function(t,e){t.default=e});var __importStar=this&&this.__importStar||function(){var ownKeys=function(t){ownKeys=Object.getOwnPropertyNames||function(t){var e=[];for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i))e[e.length]=i;return e};return ownKeys(t)};return function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i=ownKeys(t),r=0;r<i.length;r++)if("default"!==i[r])__createBinding(e,t,i[r]);__setModuleDefault(e,t);return e}}();var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:true});exports.VideoProcessingService=void 0;const path=__importStar(require("path"));const fs=__importStar(require("fs/promises"));const axios_1=__importDefault(require("axios"));const child_process_1=require("child_process");const util_1=require("util");const ffmpeg_service_1=require("./ffmpeg.service");const logger_1=require("../utils/logger");class VideoProcessingService{ffmpeg;outputDir;constructor(){this.ffmpeg=new ffmpeg_service_1.FFmpegService;this.outputDir=path.join(process.cwd(),"output")}async initialize(){await this.ensureOutputDir()}async ensureOutputDir(){try{await fs.access(this.outputDir)}catch{await fs.mkdir(this.outputDir,{recursive:true})}}async processWorkflow(t,e,i,r={}){const a=Date.now();const o=path.join(this.outputDir,`workflow_${a}`);await fs.mkdir(o,{recursive:true});try{const s=[...await this.createVideosFromImages(t,o),...e.map(t=>({path:t.url||"",duration:t.duration||0}))];const n=path.join(o,"concatenated.mp4");await this.ffmpeg.concatenateVideos(s,n,r.transition);let c=n;if(i.length>0){const t=path.join(o,"with_narration.mp4");c=await this.addNarrationTracks(c,i,t)}if(r.backgroundAudio){const t=path.join(o,"with_background_audio.mp4");c=await this.ffmpeg.addAudioTrack(c,{path:r.backgroundAudio.path,volume:r.backgroundAudio.volume||.2},t,true)}if(r.captions){const t=path.join(o,"with_captions.mp4");c=await this.ffmpeg.addSubtitles(c,r.captions,t,true)}if(r.watermark){const t=path.join(o,"with_watermark.mp4");c=await this.ffmpeg.addWatermark(c,r.watermark.path,t,r.watermark.position||"bottomright")}const u=path.join(this.outputDir,`video_${a}.mp4`);if(r.outputFormat)await this.ffmpeg.encodeVideo(c,u,r.outputFormat);else await fs.copyFile(c,u);const p=await this.ffmpeg.getVideoDuration(u);const f=await fs.stat(u);await this.cleanupWorkDir(o);return{path:u,duration:p,size:f.size}}catch(t){await this.cleanupWorkDir(o);throw t}}async createVideosFromImages(t,e){const i=[];for(let r=0;r<t.length;r++){const a=path.join(e,`image_video_${r}.mp4`);const o=5;const s=await this.ensureLocalFile(t[r].url,e,`image_${r}.jpg`);await this.ffmpeg.createVideoFromImages([s],a,o);i.push({path:a,duration:o})}return i}async addNarrationTracks(t,e,i){if(1===e.length){const r=await this.ensureLocalFile(e[0].url,path.dirname(i),"narration.mp3");return await this.ffmpeg.addAudioTrack(t,{path:r},i,false)}logger_1.logger.warn("Multiple narration tracks not fully implemented");return t}async ensureLocalFile(t,e,i){if(!t.startsWith("http"))return t;const r=path.join(e,i);const a=await axios_1.default.get(t,{responseType:"stream"});const o=(await Promise.resolve().then(()=>__importStar(require("fs")))).createWriteStream(r);a.data.pipe(o);return new Promise((t,e)=>{o.on("finish",()=>t(r));o.on("error",e)})}async cleanupWorkDir(t){try{const e=await fs.readdir(t);for(const i of e)await fs.unlink(path.join(t,i));await fs.rmdir(t)}catch(t){logger_1.logger.error("Cleanup error:",t)}}async generatePreview(t,e=5){const i=path.join(this.outputDir,`preview_${path.basename(t,".mp4")}.jpg`);await this.ffmpeg.extractFrame(t,e,i);return i}async splitVideoIntoChunks(t,e=30){const i=await this.ffmpeg.getVideoDuration(t);const r=[];for(let a=0;a<i;a+=e){const i=path.join(this.outputDir,`chunk_${a}_${path.basename(t)}`);const o=(0,util_1.promisify)(child_process_1.exec);await o(`ffmpeg -i "${t}" -ss ${a} -t ${e} -c copy "${i}" -y`);r.push(i)}return r}}exports.VideoProcessingService=VideoProcessingService;