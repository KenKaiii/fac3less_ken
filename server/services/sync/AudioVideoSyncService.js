"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,o){if(void 0===o)o=i;var r=Object.getOwnPropertyDescriptor(t,i);if(!r||("get"in r?!t.__esModule:r.writable||r.configurable))r={enumerable:true,get:function(){return t[i]}};Object.defineProperty(e,o,r)}:function(e,t,i,o){if(void 0===o)o=i;e[o]=t[i]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:true,value:t})}:function(e,t){e.default=t});var __importStar=this&&this.__importStar||function(){var ownKeys=function(e){ownKeys=Object.getOwnPropertyNames||function(e){var t=[];for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i))t[t.length]=i;return t};return ownKeys(e)};return function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i=ownKeys(e),o=0;o<i.length;o++)if("default"!==i[o])__createBinding(t,e,i[o]);__setModuleDefault(t,e);return t}}();Object.defineProperty(exports,"__esModule",{value:true});exports.AudioVideoSyncService=void 0;const child_process_1=require("child_process");const util_1=require("util");const path=__importStar(require("path"));const MediaAnalyzer_1=require("../media/MediaAnalyzer");const MediaFileManager_1=require("../media/MediaFileManager");const FFmpegCommandBuilder_1=require("../ffmpeg/FFmpegCommandBuilder");const logger_1=require("../../utils/logger");const execPromise=(0,util_1.promisify)(child_process_1.exec);class AudioVideoSyncService{mediaAnalyzer;fileManager;constructor(e,t){this.mediaAnalyzer=e||new MediaAnalyzer_1.MediaAnalyzer;this.fileManager=t||new MediaFileManager_1.MediaFileManager}async smartAudioVideoSync(e,t,i){logger_1.logger.info("[AudioVideoSyncService] Starting smart audio-video sync");const o=[];const r=[];for(const t of e){const e=await this.mediaAnalyzer.getMediaDuration(t);o.push({path:t,duration:e})}for(const e of t){const t=await this.mediaAnalyzer.getMediaDuration(e);r.push({path:e,duration:t})}logger_1.logger.debug(`[AudioVideoSyncService] Audio durations: ${o.map(e=>e.duration.toFixed(2)).join(", ")}`);logger_1.logger.debug(`[AudioVideoSyncService] Video durations: ${r.map(e=>e.duration.toFixed(2)).join(", ")}`);const a=this.createSyncStrategy(o,r);const n=[];for(let e=0;e<a.length;e++){const t=a[e];const o=path.join(i,`synced_segment_${e}.mp4`);if(1===t.videoClips.length)await this.processSimpleSegment(t,o);else await this.processComplexSegment(t,o,i,e);n.push(o);logger_1.logger.debug(`[AudioVideoSyncService] Segment ${e+1} processed`)}return{processedPaths:n,syncSegments:a}}createSyncStrategy(e,t){logger_1.logger.debug("[AudioVideoSyncService] Creating sync strategy");const i=[];for(let o=0;o<e.length;o++){const r=e[o];const a=o%t.length;const n=t[a];const d={audioPath:r.path,audioDuration:r.duration,videoClips:[{videoPath:n.path,startTime:0,duration:r.duration,originalIndex:a}]};i.push(d);logger_1.logger.debug(`[AudioVideoSyncService] Audio ${o+1} (${r.duration.toFixed(2)}s) â†’ Video ${a+1} (full segment)`)}return i}async processSimpleSegment(e,t){const i=e.videoClips[0];const o=FFmpegCommandBuilder_1.FFmpegCommandBuilder.buildSyncCommand({audioPath:e.audioPath,videoPath:i.videoPath,outputPath:t,startTime:i.startTime,audioDuration:e.audioDuration});logger_1.logger.debug(`[AudioVideoSyncService] Processing simple segment: audio=${e.audioDuration.toFixed(2)}s, video_clip=${i.duration.toFixed(2)}s`);await execPromise(o)}async processComplexSegment(e,t,i,o){const r=[];for(let t=0;t<e.videoClips.length;t++){const a=e.videoClips[t];const n=path.join(i,`seg${o}_clip${t}.mp4`);const d=FFmpegCommandBuilder_1.FFmpegCommandBuilder.buildVideoClipCommand(a.videoPath,n,a.startTime,a.duration);await execPromise(d);r.push(n)}const a=path.join(i,`seg${o}_concat.txt`);await this.fileManager.createConcatListFile(r,a);const n=FFmpegCommandBuilder_1.FFmpegCommandBuilder.buildComplexSegmentCommand({videoClipPaths:r,concatListPath:a,audioPath:e.audioPath,outputPath:t,audioDuration:e.audioDuration});await execPromise(n);for(const e of r)await this.fileManager.deleteFile(e);await this.fileManager.deleteFile(a)}calculateAdjustedTranscripts(e,t){const i=[];let o=0;for(let r=0;r<e.length&&r<t.length;r++){const a=o+t[r].audioDuration;i.push({text:e[r],startTime:o,endTime:a,originalIndex:r});o=a}return i}}exports.AudioVideoSyncService=AudioVideoSyncService;