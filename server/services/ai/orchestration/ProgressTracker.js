"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.ProgressTracker=void 0;const workflow_sse_routes_1=require("../../../api/routes/workflow.sse.routes");const logger_1=require("../../../utils/logger");class ProgressTracker{updateOverallProgress(e,o){const t=Array.from(e.nodeStatuses.values()).reduce((e,o)=>e+o.progress,0);e.progress=t/e.nodeStatuses.size;logger_1.logger.debug("[WorkflowExecutor] updateOverallProgress called:",{executionId:e.executionId,overallProgress:e.progress.toFixed(1),nodeCount:e.nodeStatuses.size,hasOnProgress:!!o.onProgress});if(o.onProgress)o.onProgress(e.executionId,e.progress,e.nodeStatuses)}sendProgressUpdate(e,o,t){(0,workflow_sse_routes_1.sendProgressUpdate)(e,o,t)}sendExecutionComplete(e,o,t,r){if("completed"===o&&r)(0,workflow_sse_routes_1.sendExecutionComplete)(e,{status:"completed",nodeResults:Array.from(r.entries()).map(([e,o])=>({nodeId:e,success:o.success,error:o.error,metadata:o.metadata}))});else(0,workflow_sse_routes_1.sendExecutionComplete)(e,{status:o,error:t})}sendNodeOutput(e,o,t,r){const s=this.determineOutputType(t);logger_1.logger.debug(`[WORKFLOW] Node ${o} completed - type: ${t}, outputType: ${s}`);if(s&&r){let i=r;if("script"===t&&"script"in r)i=r.script||r;else if("imagePrompt"===t&&"imagePrompts"in r)i={imagePrompts:r.imagePrompts};else if(("imageGeneration"===t||"image_generation"===t)&&"images"in r){const e=r.images;i=e?.length>0?e:r;logger_1.logger.debug(`🖼️ [WORKFLOW] Image generation output for ${o}:`,{imagesCount:e?.length||0,firstImage:e?.[0],allImageUrls:e?.map(e=>e.image?.path)})}else if(("audioGeneration"===t||"audio_generation"===t||"background_audio_generation"===t)&&"audioFiles"in r){const e=r.audioFiles;i=e?.length>0?e:r;logger_1.logger.debug(`🔊 [WORKFLOW] Audio generation output for ${o}:`,{audioCount:e?.length||0,firstAudio:e?.[0],allAudioPaths:e?.map(e=>e.path)})}else if(("videoGeneration"===t||"video_generation"===t)&&"videos"in r){const e=r.videos;logger_1.logger.debug(`🎬 [WORKFLOW] Video generation output for ${o}:`,{videosCount:e?.length||0,videos:e?.map(e=>({sectionId:e.sectionId,status:e.status,hasVideoPath:!!e.video?.path,videoPath:e.video?.path}))});const t=e?.find(e=>"completed"===e.status&&e.video?.path);if(t){i=t.video;logger_1.logger.debug(`[WORKFLOW] Found completed video for ${o}: ${t.video.path}`)}else{logger_1.logger.warn(`[WORKFLOW] No completed videos found for ${o}, skipping node output`);return}}logger_1.logger.debug(`[WORKFLOW] Sending node output for ${o}, type: ${s}, extracted data:`,i);(0,workflow_sse_routes_1.sendNodeOutput)(e,o,s,i,0)}else logger_1.logger.debug(`[WORKFLOW] Not sending output for ${o} - outputType: ${s}, hasData: ${!!r}`)}determineOutputType(e){const o={script:"text",script_generation:"text",script_generator:"text",imagePrompt:"text",image_prompt:"text",imageGeneration:"image",image_generation:"image",videoGeneration:"video",video_generation:"video",audioGeneration:"audio",audio_generation:"audio",background_audio_generation:"audio",captionGeneration:"text",caption_generation:"text",editing:"video",video_editing:"video",userPrompt:"",final_output:""}[e];if(void 0===o);return void 0!==o?o:null}}exports.ProgressTracker=ProgressTracker;