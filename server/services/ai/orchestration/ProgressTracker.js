"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProgressTracker=void 0;const workflow_sse_routes_1=require("../../../api/routes/workflow.sse.routes"),logger_1=require("../../../utils/logger");class ProgressTracker{updateOverallProgress(e,o){const t=Array.from(e.nodeStatuses.values()).reduce((e,o)=>e+o.progress,0);e.progress=t/e.nodeStatuses.size,logger_1.logger.debug("[WorkflowExecutor] updateOverallProgress called:",{executionId:e.executionId,overallProgress:e.progress.toFixed(1),nodeCount:e.nodeStatuses.size,hasOnProgress:!!o.onProgress}),o.onProgress&&o.onProgress(e.executionId,e.progress,e.nodeStatuses)}sendProgressUpdate(e,o,t){(0,workflow_sse_routes_1.sendProgressUpdate)(e,o,t)}sendExecutionComplete(e,o,t,r){"completed"===o&&r?(0,workflow_sse_routes_1.sendExecutionComplete)(e,{status:"completed",nodeResults:Array.from(r.entries()).map(([e,o])=>({nodeId:e,success:o.success,error:o.error,metadata:o.metadata}))}):(0,workflow_sse_routes_1.sendExecutionComplete)(e,{status:o,error:t})}sendNodeOutput(e,o,t,r){const i=this.determineOutputType(t);if(logger_1.logger.debug(`[WORKFLOW] Node ${o} completed - type: ${t}, outputType: ${i}`),i&&r){let s=r;if("script"===t&&"script"in r)s=r.script||r;else if("imagePrompt"===t&&"imagePrompts"in r)s={imagePrompts:r.imagePrompts};else if("imageGeneration"!==t&&"image_generation"!==t||!("images"in r))if("audioGeneration"!==t&&"audio_generation"!==t&&"background_audio_generation"!==t||!("audioFiles"in r)){if(("videoGeneration"===t||"video_generation"===t)&&"videos"in r){const t=r.videos;logger_1.logger.debug(`🎬 [WORKFLOW] Video generation output for ${o}:`,{videosCount:t?.length||0,videos:t?.map(e=>({sectionId:e.sectionId,status:e.status,hasVideoPath:!!e.video?.path,videoPath:e.video?.path}))});const i=t?.filter(e=>"completed"===e.status&&e.video?.path)||[];return i.length>0?void i.forEach((t,r)=>{logger_1.logger.debug(`[WORKFLOW] Sending video ${r+1}/${i.length} for ${o}`),(0,workflow_sse_routes_1.sendNodeOutput)(e,o,"video",t.video,r)}):void logger_1.logger.warn(`[WORKFLOW] No completed videos found for ${o}, skipping node output`)}"editing"!==t&&"video_editing"!==t||!("editedVideo"in r)||(s=r.editedVideo,logger_1.logger.debug(`[WORKFLOW] Editing node output for ${o}:`,{hasVideo:!!s,videoPath:s?.path}))}else{const t=r.audioFiles;if(logger_1.logger.debug(`🔊 [WORKFLOW] Audio generation output for ${o}:`,{audioCount:t?.length||0,firstAudio:t?.[0],allAudioPaths:t?.map(e=>e.path)}),t&&t.length>0)return void t.forEach((r,i)=>{logger_1.logger.debug(`[WORKFLOW] Sending audio ${i+1}/${t.length} for ${o}`),(0,workflow_sse_routes_1.sendNodeOutput)(e,o,"audio",r,i)})}else{const t=r.images;if(logger_1.logger.debug(`🖼️ [WORKFLOW] Image generation output for ${o}:`,{imagesCount:t?.length||0,firstImage:t?.[0],allImageUrls:t?.map(e=>e.image?.path)}),t&&t.length>0)return void t.forEach((r,i)=>{r.image&&(logger_1.logger.debug(`[WORKFLOW] Sending image ${i+1}/${t.length} for ${o}`),(0,workflow_sse_routes_1.sendNodeOutput)(e,o,"image",r.image,i))})}logger_1.logger.debug(`[WORKFLOW] Sending node output for ${o}, type: ${i}, extracted data:`,s),(0,workflow_sse_routes_1.sendNodeOutput)(e,o,i,s,0)}else logger_1.logger.debug(`[WORKFLOW] Not sending output for ${o} - outputType: ${i}, hasData: ${!!r}`)}determineOutputType(e){const o={script:"text",script_generation:"text",script_generator:"text",imagePrompt:"text",image_prompt:"text",imageGeneration:"image",image_generation:"image",videoGeneration:"video",video_generation:"video",audioGeneration:"audio",audio_generation:"audio",background_audio_generation:"audio",captionGeneration:"text",caption_generation:"text",editing:"video",video_editing:"video",userPrompt:"",final_output:""}[e];return void 0!==o?o:null}}exports.ProgressTracker=ProgressTracker;