"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.NodeExecutor=void 0;const logger_1=require("../../../utils/logger");class NodeExecutor{async executeNode(e,r,t,o={}){const s=e.getId();const n=new Date;if(o.onProgress)o.onProgress({nodeId:s,status:"running",startTime:n,message:`Executing ${e.getType()} node`});try{const i=e.execute(r,t);const c=o.timeout?new Promise((e,r)=>setTimeout(()=>r(new Error("Node execution timeout")),o.timeout)):null;const u=null!==c?await Promise.race([i,c]):await i;if(o.onProgress)o.onProgress({nodeId:s,status:u.success?"completed":"failed",startTime:n,endTime:new Date,error:u.error});return u}catch(r){const t=r instanceof Error?r.message:"Unknown error";logger_1.logger.error("Node execution failed",{nodeId:s,nodeType:e.getType(),error:t,stack:r instanceof Error?r.stack:void 0,timeout:o.timeout,retries:o.retries});if(o.onProgress)o.onProgress({nodeId:s,status:"failed",startTime:n,endTime:new Date,error:t});return{success:false,error:t}}}async executeWithRetry(e,r,t,o={}){const s=o.retries||0;let n;for(let i=0;i<=s;i++){const c=await this.executeNode(e,r,t,o);if(c.success)return c;n=c.error;if(i<s){const e=1e3*Math.pow(2,i);await new Promise(r=>setTimeout(r,e))}}return{success:false,error:n||"Max retries exceeded"}}}exports.NodeExecutor=NodeExecutor;