"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.ImagenModel=void 0;const types_1=require("../types");const logger_1=require("../../../../../../utils/logger");class ImagenModel extends types_1.BaseReplicateImageModel{modelId="google/imagen-3:78ff0496f7b87416982ecf130b126d2f8a316c0504eb487ca5a0d4353622afee";config={id:"imagen-3",name:"Google Imagen 3",description:"Google's state-of-the-art text-to-image model with excellent quality and safety features",minWidth:512,maxWidth:2048,minHeight:512,maxHeight:2048,supportedAspectRatios:["1:1","16:9","9:16","4:3","3:4","3:2","2:3"],supportedFormats:["png","jpeg"],costPerImage:.018,defaultOptions:{outputFormat:"png",safetyFilter:true}};replicate;constructor(e){super();this.replicate=e}async generateImage(e){this.validateOptions(e);const t=Date.now();const r={prompt:e.prompt,aspect_ratio:e.aspectRatio||"1:1",safety_filter_level:false===e.safetyFilter?"block_none":"block_medium_and_above",seed:e.seed};try{const a=await this.replicate.run(this.modelId,{input:r});const o=a instanceof ReadableStream?await this.streamToUrl(a):String(a);const s=(Date.now()-t)/1e3;const[i,n]=this.calculateDimensions(e.aspectRatio||"1:1");return{url:o,format:e.outputFormat||"png",width:i,height:n,model:this.config.name,cost:this.config.costPerImage,generationTime:s}}catch(t){logger_1.logger.error("Imagen image generation failed",{error:t instanceof Error?t.message:String(t),stack:t instanceof Error?t.stack:void 0,modelId:this.modelId,options:{prompt:e.prompt,aspectRatio:e.aspectRatio,safetyFilter:e.safetyFilter}});throw new Error(`Imagen generation failed: ${t instanceof Error?t.message:String(t)}`)}}calculateDimensions(e){return{"1:1":[1024,1024],"16:9":[1536,864],"9:16":[864,1536],"4:3":[1024,768],"3:4":[768,1024],"3:2":[1536,1024],"2:3":[1024,1536]}[e]||[1024,1024]}async streamToUrl(e){try{const t=e.getReader();const r=[];while(true){const{done:e,value:a}=await t.read();if(e)break;r.push(a)}const a=new Blob(r);return URL.createObjectURL(a)}catch(e){logger_1.logger.error("Failed to convert stream to URL in ImagenModel",{error:e instanceof Error?e.message:String(e),stack:e instanceof Error?e.stack:void 0});throw new Error(`Stream conversion failed: ${e instanceof Error?e.message:String(e)}`)}}async submitImageJob(e){this.validateOptions(e);const t={prompt:e.prompt,aspect_ratio:e.aspectRatio||"1:1",safety_filter_level:false===e.safetyFilter?"block_none":"block_medium_and_above",seed:e.seed};try{const e=await this.createPrediction(t);return{id:e.id,status:this.mapPredictionStatus(e.status),progress:0,estimatedCompletionTime:new Date(Date.now()+3e4)}}catch(e){logger_1.logger.error("Failed to submit Imagen image job",{error:e instanceof Error?e.message:String(e),stack:e instanceof Error?e.stack:void 0,modelId:this.modelId,input:t});throw new Error(`Failed to submit image job: ${e instanceof Error?e.message:String(e)}`)}}async checkJobStatus(e){try{const t=await this.getPrediction(e);const r={id:t.id,status:this.mapPredictionStatus(t.status),progress:t.logs?this.extractProgress(t.logs):0};if("succeeded"===t.status&&t.output){let e;const a=t.output;if(a instanceof ReadableStream)e=await this.streamToUrl(a);else if("string"===typeof a)e=a;else if(Array.isArray(a)&&a.length>0)e=a[0];else throw new Error("Unexpected output format from Replicate");r.url=e}else if("failed"===t.status)r.error="string"===typeof t.error?t.error:"Image generation failed";return r}catch(t){logger_1.logger.error("Failed to check Imagen job status",{error:t instanceof Error?t.message:String(t),stack:t instanceof Error?t.stack:void 0,jobId:e});throw new Error(`Failed to check job status: ${t instanceof Error?t.message:String(t)}`)}}mapPredictionStatus(e){switch(e){case"starting":case"pending":return"pending";case"processing":default:return"processing";case"succeeded":return"completed";case"failed":case"canceled":return"failed"}}extractProgress(e){const t=e.match(/(\d+)%/);if(t)return parseInt(t[1]);return 0}}exports.ImagenModel=ImagenModel;