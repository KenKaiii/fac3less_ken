"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.FluxModel=void 0;const types_1=require("../types");const logger_1=require("../../../../../../utils/logger");class FluxModel extends types_1.BaseReplicateImageModel{modelId="black-forest-labs/flux-dev-lora:ae0d7d645446924cf1871e3ca8796e8318f72465d2b5af9323a835df93bf0917";config={id:"flux-dev-lora",name:"Flux Dev LoRA",description:"Advanced image generation with LoRA support for custom styles and concepts",minWidth:256,maxWidth:1920,minHeight:256,maxHeight:1920,supportedAspectRatios:["1:1","16:9","9:16","4:3","3:4","21:9","9:21"],supportedFormats:["webp","png","jpeg"],costPerImage:.025,defaultOptions:{guidanceScale:3,numInferenceSteps:28,outputFormat:"webp"}};replicate;constructor(e){super();this.replicate=e}async generateImage(e){this.validateOptions(e);const t=Date.now();const r={prompt:e.prompt,go_fast:true,guidance:e.guidanceScale??this.config.defaultOptions.guidanceScale,lora_scale:e.loraScale??1,megapixels:"1",num_outputs:1,aspect_ratio:e.aspectRatio??"1:1",lora_weights:e.loraWeights,output_format:e.outputFormat??"webp",output_quality:80,prompt_strength:.8,num_inference_steps:e.numInferenceSteps??this.config.defaultOptions.numInferenceSteps,seed:e.seed};try{const o=await this.replicate.run(this.modelId,{input:r});let a;if(Array.isArray(o))if(o[0]instanceof ReadableStream)a=await this.streamToUrl(o[0]);else a=o[0].toString();else if(o instanceof ReadableStream)a=await this.streamToUrl(o);else a=String(o);const s=(Date.now()-t)/1e3;const[i,n]=this.calculateDimensions(e.aspectRatio??"1:1");return{url:a,format:e.outputFormat??"webp",width:i,height:n,model:this.config.name,cost:this.config.costPerImage,generationTime:s}}catch(t){logger_1.logger.error("Flux image generation failed",{error:t instanceof Error?t.message:String(t),stack:t instanceof Error?t.stack:void 0,modelId:this.modelId,options:{prompt:e.prompt,aspectRatio:e.aspectRatio,outputFormat:e.outputFormat}});throw new Error(`Flux generation failed: ${t instanceof Error?t.message:String(t)}`)}}calculateDimensions(e){return{"1:1":[1024,1024],"16:9":[1920,1080],"9:16":[1080,1920],"4:3":[1024,768],"3:4":[768,1024],"21:9":[1920,823],"9:21":[823,1920]}[e]||[1024,1024]}async streamToUrl(e){try{const t=e.getReader();const r=[];while(true){const{done:e,value:o}=await t.read();if(e)break;r.push(o)}const o=new Blob(r);return URL.createObjectURL(o)}catch(e){logger_1.logger.error("Failed to convert stream to URL",{error:e instanceof Error?e.message:String(e),stack:e instanceof Error?e.stack:void 0});throw new Error(`Stream conversion failed: ${e instanceof Error?e.message:String(e)}`)}}async submitImageJob(e){this.validateOptions(e);const t={prompt:e.prompt,go_fast:true,guidance:e.guidanceScale??this.config.defaultOptions.guidanceScale,lora_scale:e.loraScale??1,megapixels:"1",num_outputs:1,aspect_ratio:e.aspectRatio??"1:1",lora_weights:e.loraWeights,output_format:e.outputFormat??"webp",output_quality:80,prompt_strength:.8,num_inference_steps:e.numInferenceSteps??this.config.defaultOptions.numInferenceSteps,seed:e.seed};try{const e=await this.createPrediction(t);return{id:e.id,status:this.mapPredictionStatus(e.status),progress:0,estimatedCompletionTime:new Date(Date.now()+3e4)}}catch(e){logger_1.logger.error("Failed to submit Flux image job",{error:e instanceof Error?e.message:String(e),stack:e instanceof Error?e.stack:void 0,modelId:this.modelId,input:t});throw new Error(`Failed to submit image job: ${e instanceof Error?e.message:String(e)}`)}}async checkJobStatus(e){try{const t=await this.getPrediction(e);const r={id:t.id,status:this.mapPredictionStatus(t.status),progress:t.logs?this.extractProgress(t.logs):0};if("succeeded"===t.status&&t.output){let e;const o=t.output;if(Array.isArray(o)&&o.length>0)if("object"===typeof o[0]&&null!==o[0]&&"readable"in o[0])e=await this.streamToUrl(o[0]);else e=o[0].toString();else if("object"===typeof o&&null!==o&&"readable"in o)e=await this.streamToUrl(o);else if("string"===typeof o)e=o;else throw new Error("Unexpected output format from Replicate");r.url=e}else if("failed"===t.status)r.error="string"===typeof t.error?t.error:"Image generation failed";return r}catch(t){logger_1.logger.error("Failed to check Flux job status",{error:t instanceof Error?t.message:String(t),stack:t instanceof Error?t.stack:void 0,jobId:e});throw new Error(`Failed to check job status: ${t instanceof Error?t.message:String(t)}`)}}mapPredictionStatus(e){switch(e){case"starting":case"pending":return"pending";case"processing":default:return"processing";case"succeeded":return"completed";case"failed":case"canceled":return"failed"}}extractProgress(e){const t=e.match(/(\d+)%/);if(t)return parseInt(t[1]);return 0}}exports.FluxModel=FluxModel;