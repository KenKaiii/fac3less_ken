"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.BaseReplicateImageModel=void 0;const logger_1=require("../../../../../utils/logger");class BaseReplicateImageModel{getConfig(){return this.config}async createPrediction(e){try{const t=this.replicate;return await t.predictions.create({version:this.modelId,input:e})}catch(t){logger_1.logger.error("Failed to create Replicate prediction",{error:t instanceof Error?t.message:"Unknown error",stack:t instanceof Error?t.stack:void 0,modelId:this.modelId,input:e});throw new Error(`Failed to create prediction: ${t instanceof Error?t.message:"Unknown error"}`)}}async getPrediction(e){try{const t=this.replicate;return await t.predictions.get(e)}catch(t){logger_1.logger.error("Failed to get Replicate prediction status",{error:t instanceof Error?t.message:"Unknown error",stack:t instanceof Error?t.stack:void 0,predictionId:e});throw new Error(`Failed to get prediction status: ${t instanceof Error?t.message:"Unknown error"}`)}}validateOptions(e){if(!e.prompt||0===e.prompt.trim().length)throw new Error("Prompt is required");if(e.width&&(e.width<this.config.minWidth||e.width>this.config.maxWidth))throw new Error(`Width must be between ${this.config.minWidth} and ${this.config.maxWidth}`);if(e.height&&(e.height<this.config.minHeight||e.height>this.config.maxHeight))throw new Error(`Height must be between ${this.config.minHeight} and ${this.config.maxHeight}`);if(e.aspectRatio&&!this.config.supportedAspectRatios.includes(e.aspectRatio))throw new Error(`Aspect ratio ${e.aspectRatio} not supported. Supported: ${this.config.supportedAspectRatios.join(", ")}`)}}exports.BaseReplicateImageModel=BaseReplicateImageModel;