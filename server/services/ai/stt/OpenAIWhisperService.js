"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(){var ownKeys=function(e){return ownKeys=Object.getOwnPropertyNames||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[t.length]=r);return t},ownKeys(e)};return function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r=ownKeys(e),n=0;n<r.length;n++)"default"!==r[n]&&__createBinding(t,e,r[n]);return __setModuleDefault(t,e),t}}(),__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.OpenAIWhisperService=void 0;const openai_1=__importDefault(require("openai")),fs=__importStar(require("fs"));class OpenAIWhisperService{openai;constructor(){if(!process.env.OPENAI_API_KEY)throw new Error("OPENAI_API_KEY is required for OpenAI Whisper service");this.openai=new openai_1.default({apiKey:process.env.OPENAI_API_KEY})}async extractWordLevelTimestamps(e){try{const t=fs.createReadStream(e),r=await this.openai.audio.transcriptions.create({file:t,model:"whisper-1",response_format:"verbose_json",timestamp_granularities:["word"]});return console.error("ðŸŽ¤ [WHISPER_DEBUG] Raw OpenAI Whisper output:",JSON.stringify(r,null,2)),this.parseOpenAIOutput(r)}catch(e){const t=e instanceof Error?e.message:String(e);throw new Error(`OpenAI Whisper STT failed: ${t}`)}}parseOpenAIOutput(e){const t=[],r=[];if(e&&e.words&&Array.isArray(e.words)){for(const r of e.words)t.push({word:r.word?.trim()||"",start:r.start||0,end:r.end||0,confidence:void 0});if(t.length>0){const e=8;for(let n=0;n<t.length;n+=e){const i=t.slice(n,n+e),o=i.map(e=>e.word).join(" ");r.push({id:Math.floor(n/e),seek:0,start:i[0].start,end:i[i.length-1].end,text:o,words:i})}}}return{text:e.text||"",language:e.language||"en",duration:e.duration||0,words:t,segments:r}}async testService(){try{return!!process.env.OPENAI_API_KEY}catch{return!1}}}exports.OpenAIWhisperService=OpenAIWhisperService;