"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ClientManager=void 0;const ReplicateClient_1=require("../video/providers/replicate/ReplicateClient"),OpenRouterClient_1=require("../llm/providers/openrouter/OpenRouterClient"),environment_1=require("../../../../config/environment");class ClientManager{static instance;replicateClient=null;openRouterClient=null;isInitialized=!1;metrics;retryConfig={maxRetries:3,baseDelay:1e3,maxDelay:3e4};constructor(){this.metrics={activeClients:{replicate:0,openrouter:0},totalRequests:0,rateLimitStatus:{replicate:!1,openrouter:!1}}}static getInstance(){return ClientManager.instance||(ClientManager.instance=new ClientManager),ClientManager.instance}async initialize(){this.isInitialized||this.initializeSync()}initializeSync(){if(!this.isInitialized){(0,environment_1.validateEnvironment)();try{this.replicateClient=new ReplicateClient_1.ReplicateClient({apiKey:environment_1.environment.replicateApiToken}),this.openRouterClient=new OpenRouterClient_1.OpenRouterClient({apiKey:environment_1.environment.openRouterApiKey}),this.metrics.activeClients.replicate=1,this.metrics.activeClients.openrouter=1,this.isInitialized=!0,console.warn("✅ ClientManager initialized successfully"),console.warn("   - ReplicateClient: Ready"),console.warn("   - OpenRouterClient: Ready")}catch(e){const t=`Failed to initialize API clients: ${e instanceof Error?e.message:"Unknown error"}`;throw console.error("❌ ClientManager initialization failed:",t),new Error(t)}}}getReplicateClient(){if(!this.replicateClient)try{this.initializeSync()}catch(e){throw new Error(`ClientManager auto-initialization failed: ${e instanceof Error?e.message:"Unknown error"}`)}return this.replicateClient}getOpenRouterClient(){if(!this.openRouterClient)try{this.initializeSync()}catch(e){throw new Error(`ClientManager auto-initialization failed: ${e instanceof Error?e.message:"Unknown error"}`)}return this.openRouterClient}async withRetry(e,t="replicate"){for(let i=0;i<=this.retryConfig.maxRetries;i++)try{this.metrics.totalRequests++;const i=await e();return this.metrics.rateLimitStatus[t]=!1,i}catch(e){const n=i===this.retryConfig.maxRetries,r=this.isRetryableError(e);if(429===e.status&&(this.metrics.rateLimitStatus[t]=!0),n||!r)throw console.error(`❌ ${t} API call failed after ${i+1} attempts:`,e.message||"Unknown error"),e;const a=Math.min(this.retryConfig.baseDelay*Math.pow(2,i),this.retryConfig.maxDelay);console.warn(`⚠️ ${t} API call failed (attempt ${i+1}), retrying in ${a}ms:`,e.message||"Unknown error"),await this.sleep(a)}throw new Error("Retry logic error - this should not be reached")}getMetrics(){return{...this.metrics}}isReady(){return this.isInitialized&&null!==this.replicateClient&&null!==this.openRouterClient}async cleanup(){try{this.replicateClient&&"function"==typeof this.replicateClient.cleanup&&await this.replicateClient.cleanup(),this.openRouterClient&&"function"==typeof this.openRouterClient.cleanup&&await this.openRouterClient.cleanup(),this.replicateClient=null,this.openRouterClient=null,this.isInitialized=!1,this.metrics.activeClients.replicate=0,this.metrics.activeClients.openrouter=0,console.warn("✅ ClientManager cleanup completed")}catch(e){throw console.error("❌ Error during ClientManager cleanup:",e),e}}static reset(){ClientManager.instance&&(ClientManager.instance.cleanup().catch(console.error),ClientManager.instance=null)}isRetryableError(e){if(429===e.status)return!0;if(e.status&&e.status>=500&&e.status<600)return!0;if("ECONNRESET"===e.code||"ENOTFOUND"===e.code||"ETIMEDOUT"===e.code)return!0;const t=e.message?.toLowerCase()||"";return["rate limit","rate_limit","too many requests","model_busy","model is busy","temporary unavailable","service unavailable"].some(e=>t.includes(e))}sleep(e){return new Promise(t=>setTimeout(t,e))}}exports.ClientManager=ClientManager;