"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,r,t,a){if(void 0===a)a=t;var i=Object.getOwnPropertyDescriptor(r,t);if(!i||("get"in i?!r.__esModule:i.writable||i.configurable))i={enumerable:true,get:function(){return r[t]}};Object.defineProperty(e,a,i)}:function(e,r,t,a){if(void 0===a)a=t;e[a]=r[t]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:true,value:r})}:function(e,r){e.default=r});var __importStar=this&&this.__importStar||function(){var ownKeys=function(e){ownKeys=Object.getOwnPropertyNames||function(e){var r=[];for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))r[r.length]=t;return r};return ownKeys(e)};return function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t=ownKeys(e),a=0;a<t.length;a++)if("default"!==t[a])__createBinding(r,e,t[a]);__setModuleDefault(r,e);return r}}();Object.defineProperty(exports,"__esModule",{value:true});exports.MediaFileManager=void 0;const fs_1=require("fs");const path=__importStar(require("path"));const logger_1=require("../../utils/logger");class MediaFileManager{async downloadFile(e,r,t){if(!e.startsWith("http://")&&!e.startsWith("https://"))return e;const a=path.join(r,t);try{const r=await fetch(e);if(!r.ok)throw new Error(`Failed to download file: ${r.statusText}`);const t=await r.arrayBuffer();await fs_1.promises.writeFile(a,Buffer.from(t));return a}catch(r){logger_1.logger.error(`[MediaFileManager] Failed to download ${e}:`,r);throw r}}async downloadFiles(e,r,t){const a=e.map((e,a)=>{const i=e.endsWith(".mp3")?"mp3":"mp4";const n=`${t}_${a+1}.${i}`;return this.downloadFile(e,r,n)});try{return await Promise.all(a)}catch(e){logger_1.logger.error("[MediaFileManager] Failed to download files:",e);throw e}}async createTempDirectory(e,r){const t=`${r}_${Date.now()}_${Math.random().toString(36).substring(7)}`;const a=path.join(e,t);await fs_1.promises.mkdir(a,{recursive:true});return a}async cleanupDirectory(e){try{await fs_1.promises.rm(e,{recursive:true,force:true});logger_1.logger.debug(`[MediaFileManager] Cleaned up directory: ${e}`)}catch(r){logger_1.logger.warn(`[MediaFileManager] Failed to cleanup directory ${e}:`,r)}}async ensureDirectory(e){await fs_1.promises.mkdir(e,{recursive:true})}async writeFile(e,r){await fs_1.promises.writeFile(e,r)}async readFile(e){return await fs_1.promises.readFile(e)}async fileExists(e){try{await fs_1.promises.access(e);return true}catch{return false}}async getFileStats(e){return await fs_1.promises.stat(e)}async moveFile(e,r){await fs_1.promises.rename(e,r)}async deleteFile(e){await fs_1.promises.unlink(e)}async createConcatListFile(e,r){const t=e.map(e=>`file '${path.resolve(e)}'`).join("\n");await this.writeFile(r,t)}resolvePath(e,r){if(path.isAbsolute(e))return e;return path.join(r||process.cwd(),e)}}exports.MediaFileManager=MediaFileManager;