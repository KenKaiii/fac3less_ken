"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,r,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(r,t);i&&!("get"in i?!r.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,a,i)}:function(e,r,t,a){void 0===a&&(a=t),e[a]=r[t]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),__importStar=this&&this.__importStar||function(){var ownKeys=function(e){return ownKeys=Object.getOwnPropertyNames||function(e){var r=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[r.length]=t);return r},ownKeys(e)};return function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t=ownKeys(e),a=0;a<t.length;a++)"default"!==t[a]&&__createBinding(r,e,t[a]);return __setModuleDefault(r,e),r}}();Object.defineProperty(exports,"__esModule",{value:!0}),exports.MediaFileManager=void 0;const fs_1=require("fs"),path=__importStar(require("path")),logger_1=require("../../utils/logger");class MediaFileManager{async downloadFile(e,r,t){if(!e.startsWith("http://")&&!e.startsWith("https://"))return e;const a=path.join(r,t);try{const r=await fetch(e);if(!r.ok)throw new Error(`Failed to download file: ${r.statusText}`);const t=await r.arrayBuffer();return await fs_1.promises.writeFile(a,Buffer.from(t)),a}catch(r){throw logger_1.logger.error(`[MediaFileManager] Failed to download ${e}:`,r),r}}async downloadFiles(e,r,t){const a=e.map((e,a)=>{const i=e.endsWith(".mp3")?"mp3":"mp4",n=`${t}_${a+1}.${i}`;return this.downloadFile(e,r,n)});try{return await Promise.all(a)}catch(e){throw logger_1.logger.error("[MediaFileManager] Failed to download files:",e),e}}async createTempDirectory(e,r){const t=`${r}_${Date.now()}_${Math.random().toString(36).substring(7)}`,a=path.join(e,t);return await fs_1.promises.mkdir(a,{recursive:!0}),a}async cleanupDirectory(e){try{await fs_1.promises.rm(e,{recursive:!0,force:!0}),logger_1.logger.debug(`[MediaFileManager] Cleaned up directory: ${e}`)}catch(r){logger_1.logger.warn(`[MediaFileManager] Failed to cleanup directory ${e}:`,r)}}async ensureDirectory(e){await fs_1.promises.mkdir(e,{recursive:!0})}async writeFile(e,r){await fs_1.promises.writeFile(e,r)}async readFile(e){return await fs_1.promises.readFile(e)}async fileExists(e){try{return await fs_1.promises.access(e),!0}catch{return!1}}async getFileStats(e){return await fs_1.promises.stat(e)}async moveFile(e,r){await fs_1.promises.rename(e,r)}async deleteFile(e){await fs_1.promises.unlink(e)}async createConcatListFile(e,r){const t=e.map(e=>`file '${path.resolve(e)}'`).join("\n");await this.writeFile(r,t)}resolvePath(e,r){return path.isAbsolute(e)?e:path.join(r||process.cwd(),e)}}exports.MediaFileManager=MediaFileManager;